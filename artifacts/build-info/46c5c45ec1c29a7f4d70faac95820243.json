{"id":"46c5c45ec1c29a7f4d70faac95820243","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\n// solhint-disable-next-line no-unused-import\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/raffle.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol\";\n\nerror Raffle__NotEnoughETHEntered();\nerror Raffle__TransferFailed();\nerror Lottery__NotOpen();\n\ncontract Raffle is VRFConsumerBaseV2 {\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    // State variables\n    uint256 private immutable i_entryFee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gaslane;\n    uint64 private immutable i_subscriptionId;\n    uint16 private constant NUM_REQUEST_CONFIRMATIONS = 3;\n    uint32 private immutable i_callBackGasLimit;\n    uint32 private constant NUM_WORDS = 1;\n    LotteryState private s_lotteryState;\n\n    address private s_latestWinner;\n\n    // Events\n    event LotteryEnter(address indexed player);\n    event RequestedLotteryWinner(uint256 indexed requestID);\n    event PickedWinner(address indexed winner);\n\n    constructor(\n        uint256 entranceFee,\n        address vrfCoordinatorV2,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callBackGasLimit\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entryFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gaslane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callBackGasLimit = callBackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n    }\n\n    function enterLottery() public payable {\n        if (msg.value < i_entryFee) {\n            revert Raffle__NotEnoughETHEntered();\n        }\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        s_players.push(payable(msg.sender));\n        emit LotteryEnter(msg.sender); // Emitting an event when we update s_players\n    }\n\n    //function checkUpKeep(bytes calldata checkdata) external override {}\n\n    function requestForRandomWinner() external {\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestID = i_vrfCoordinator.requestRandomWords(\n            i_gaslane,\n            i_subscriptionId,\n            NUM_REQUEST_CONFIRMATIONS,\n            i_callBackGasLimit,\n            NUM_WORDS\n        );\n        emit RequestedLotteryWinner(requestID);\n    }\n\n    function fulfillRandomWords(uint256 requestID, uint256[] memory randomWords) internal override {\n        uint256 winnerIndex = randomWords[0] % s_players.length;\n        address payable latestWinner = s_players[winnerIndex];\n        s_latestWinner = latestWinner;\n        s_lotteryState = LotteryState.OPEN;\n        s_players = new address payable[](0);\n        (bool success, ) = latestWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Raffle__TransferFailed();\n        }\n        emit PickedWinner(latestWinner);\n    }\n\n    function getEntryFee() public view returns (uint256) {\n        return i_entryFee;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getLatestWinner() public view returns (address) {\n        return s_latestWinner;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/raffle.sol:77:33:\n   |\n77 |     function fulfillRandomWords(uint256 requestID, uint256[] memory randomWords) internal override {\n   |                                 ^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2533,"file":"contracts/raffle.sol","start":2516},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[18]},"id":19,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":18,"linearizedBaseContracts":[18],"name":"AutomationCompatibleInterface","nameLocation":"120:29:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"154:985:0","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":11,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1151:11:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"checkData","nameLocation":"1178:9:0","nodeType":"VariableDeclaration","scope":11,"src":"1163:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3,"name":"bytes","nodeType":"ElementaryTypeName","src":"1163:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1162:26:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1212:12:0","nodeType":"VariableDeclaration","scope":11,"src":"1207:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6,"name":"bool","nodeType":"ElementaryTypeName","src":"1207:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9,"mutability":"mutable","name":"performData","nameLocation":"1239:11:0","nodeType":"VariableDeclaration","scope":11,"src":"1226:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8,"name":"bytes","nodeType":"ElementaryTypeName","src":"1226:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1206:45:0"},"scope":18,"src":"1142:110:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"1256:1003:0","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":17,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2271:13:0","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"performData","nameLocation":"2300:11:0","nodeType":"VariableDeclaration","scope":17,"src":"2285:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":13,"name":"bytes","nodeType":"ElementaryTypeName","src":"2285:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2284:28:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2321:0:0"},"scope":18,"src":"2262:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":19,"src":"110:2214:0","usedErrors":[]}],"src":"32:2293:0"},"id":0},"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol","exportedSymbols":{"KeeperCompatibleInterface":[18]},"id":23,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":20,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"134:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","file":"./AutomationCompatibleInterface.sol","id":22,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":19,"src":"204:111:1","symbolAliases":[{"foreign":{"id":21,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"src":"212:29:1","typeDescriptions":{}},"local":"KeeperCompatibleInterface","nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"134:182:1"},"id":1},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[80]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":24,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"57:5275:2","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":80,"linearizedBaseContracts":[80],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:2","nodeType":"ContractDefinition","nodes":[{"id":31,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:2","nodeType":"ErrorDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"have","nameLocation":"5413:4:2","nodeType":"VariableDeclaration","scope":31,"src":"5405:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":29,"mutability":"mutable","name":"want","nameLocation":"5427:4:2","nodeType":"VariableDeclaration","scope":31,"src":"5419:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:2"},"src":"5373:60:2"},{"constant":false,"id":33,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5546:14:2","nodeType":"VariableDeclaration","scope":80,"src":"5520:40:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"5520:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":43,"nodeType":"Block","src":"5677:43:2","statements":[{"expression":{"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":39,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"5683:14:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":40,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"5700:15:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5683:32:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42,"nodeType":"ExpressionStatement","src":"5683:32:2"}]},"documentation":{"id":34,"nodeType":"StructuredDocumentation","src":"5565:72:2","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":44,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5660:15:2","nodeType":"VariableDeclaration","scope":44,"src":"5652:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":35,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5651:25:2"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"5677:0:2"},"scope":80,"src":"5640:80:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"5724:686:2","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":53,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6514:18:2","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"requestId","nameLocation":"6541:9:2","nodeType":"VariableDeclaration","scope":53,"src":"6533:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":46,"name":"uint256","nodeType":"ElementaryTypeName","src":"6533:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":50,"mutability":"mutable","name":"randomWords","nameLocation":"6569:11:2","nodeType":"VariableDeclaration","scope":53,"src":"6552:28:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":48,"name":"uint256","nodeType":"ElementaryTypeName","src":"6552:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":49,"nodeType":"ArrayTypeName","src":"6552:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6532:49:2"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"6598:0:2"},"scope":80,"src":"6505:94:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":78,"nodeType":"Block","src":"6883:167:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":64,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":61,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6893:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6893:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":63,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"6907:14:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6893:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":72,"nodeType":"IfStatement","src":"6889:109:2","trueBody":{"id":71,"nodeType":"Block","src":"6923:75:2","statements":[{"errorCall":{"arguments":[{"expression":{"id":66,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6964:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6964:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":68,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"6976:14:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":65,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"6938:25:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6938:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":70,"nodeType":"RevertStatement","src":"6931:60:2"}]}},{"expression":{"arguments":[{"id":74,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"7022:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":75,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"7033:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":73,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"7003:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7003:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"7003:42:2"}]},"functionSelector":"1fe543e3","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6803:21:2","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"requestId","nameLocation":"6833:9:2","nodeType":"VariableDeclaration","scope":79,"src":"6825:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint256","nodeType":"ElementaryTypeName","src":"6825:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"randomWords","nameLocation":"6861:11:2","nodeType":"VariableDeclaration","scope":79,"src":"6844:28:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":56,"name":"uint256","nodeType":"ElementaryTypeName","src":"6844:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":57,"nodeType":"ArrayTypeName","src":"6844:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6824:49:2"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"6883:0:2"},"scope":80,"src":"6794:256:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":81,"src":"5333:1719:2","usedErrors":[31]}],"src":"32:7021:2"},"id":2},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[176]},"id":177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":176,"linearizedBaseContracts":[176],"name":"VRFCoordinatorV2Interface","nameLocation":"120:25:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"150:267:3","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":93,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"429:16:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"445:2:3"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"471:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":85,"name":"uint16","nodeType":"ElementaryTypeName","src":"471:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"479:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":87,"name":"uint32","nodeType":"ElementaryTypeName","src":"479:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":91,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"487:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":89,"name":"bytes32","nodeType":"ElementaryTypeName","src":"487:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":90,"nodeType":"ArrayTypeName","src":"487:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"470:34:3"},"scope":176,"src":"420:85:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"509:1511:3","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":109,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2032:18:3","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"keyHash","nameLocation":"2064:7:3","nodeType":"VariableDeclaration","scope":109,"src":"2056:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2056:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"subId","nameLocation":"2084:5:3","nodeType":"VariableDeclaration","scope":109,"src":"2077:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":97,"name":"uint64","nodeType":"ElementaryTypeName","src":"2077:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2102:27:3","nodeType":"VariableDeclaration","scope":109,"src":"2095:34:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":99,"name":"uint16","nodeType":"ElementaryTypeName","src":"2095:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2142:16:3","nodeType":"VariableDeclaration","scope":109,"src":"2135:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":101,"name":"uint32","nodeType":"ElementaryTypeName","src":"2135:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"numWords","nameLocation":"2171:8:3","nodeType":"VariableDeclaration","scope":109,"src":"2164:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":103,"name":"uint32","nodeType":"ElementaryTypeName","src":"2164:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2050:133:3"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"requestId","nameLocation":"2210:9:3","nodeType":"VariableDeclaration","scope":109,"src":"2202:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:19:3"},"scope":176,"src":"2023:198:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"2225:384:3","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2621:18:3","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"2639:2:3"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"subId","nameLocation":"2667:5:3","nodeType":"VariableDeclaration","scope":115,"src":"2660:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":112,"name":"uint64","nodeType":"ElementaryTypeName","src":"2660:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2659:14:3"},"scope":176,"src":"2612:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"2678:381:3","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":130,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3071:15:3","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3099:5:3","nodeType":"VariableDeclaration","scope":130,"src":"3092:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3092:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3086:22:3"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"balance","nameLocation":"3139:7:3","nodeType":"VariableDeclaration","scope":130,"src":"3132:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":120,"name":"uint96","nodeType":"ElementaryTypeName","src":"3132:6:3","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":123,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:3","nodeType":"VariableDeclaration","scope":130,"src":"3148:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":122,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"owner","nameLocation":"3173:5:3","nodeType":"VariableDeclaration","scope":130,"src":"3165:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"3165:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"consumers","nameLocation":"3197:9:3","nodeType":"VariableDeclaration","scope":130,"src":"3180:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"3180:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":127,"nodeType":"ArrayTypeName","src":"3180:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3131:76:3"},"scope":176,"src":"3062:146:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"3212:164:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":138,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3388:32:3","nodeType":"FunctionDefinition","parameters":{"id":136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"subId","nameLocation":"3428:5:3","nodeType":"VariableDeclaration","scope":138,"src":"3421:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":132,"name":"uint64","nodeType":"ElementaryTypeName","src":"3421:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":135,"mutability":"mutable","name":"newOwner","nameLocation":"3443:8:3","nodeType":"VariableDeclaration","scope":138,"src":"3435:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":134,"name":"address","nodeType":"ElementaryTypeName","src":"3435:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3420:32:3"},"returnParameters":{"id":137,"nodeType":"ParameterList","parameters":[],"src":"3461:0:3"},"scope":176,"src":"3379:83:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"3466:212:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":144,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3690:31:3","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"subId","nameLocation":"3729:5:3","nodeType":"VariableDeclaration","scope":144,"src":"3722:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":140,"name":"uint64","nodeType":"ElementaryTypeName","src":"3722:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3721:14:3"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"3744:0:3"},"scope":176,"src":"3681:64:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"3749:170:3","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3931:11:3","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"3950:5:3","nodeType":"VariableDeclaration","scope":152,"src":"3943:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"3943:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"consumer","nameLocation":"3965:8:3","nodeType":"VariableDeclaration","scope":152,"src":"3957:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"3957:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3942:32:3"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"3983:0:3"},"scope":176,"src":"3922:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"3988:172:3","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":160,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4172:14:3","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"subId","nameLocation":"4194:5:3","nodeType":"VariableDeclaration","scope":160,"src":"4187:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":154,"name":"uint64","nodeType":"ElementaryTypeName","src":"4187:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"consumer","nameLocation":"4209:8:3","nodeType":"VariableDeclaration","scope":160,"src":"4201:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"4201:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4186:32:3"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4227:0:3"},"scope":176,"src":"4163:65:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"4232:140:3","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":168,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4384:18:3","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"subId","nameLocation":"4410:5:3","nodeType":"VariableDeclaration","scope":168,"src":"4403:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":162,"name":"uint64","nodeType":"ElementaryTypeName","src":"4403:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"to","nameLocation":"4425:2:3","nodeType":"VariableDeclaration","scope":168,"src":"4417:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"4417:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4402:26:3"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"4437:0:3"},"scope":176,"src":"4375:63:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":175,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4743:20:3","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"subId","nameLocation":"4771:5:3","nodeType":"VariableDeclaration","scope":175,"src":"4764:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":169,"name":"uint64","nodeType":"ElementaryTypeName","src":"4764:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4763:14:3"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":175,"src":"4801:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"4801:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4800:6:3"},"scope":176,"src":"4734:73:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":177,"src":"110:4699:3","usedErrors":[]}],"src":"32:4778:3"},"id":3},"contracts/raffle.sol":{"ast":{"absolutePath":"contracts/raffle.sol","exportedSymbols":{"KeeperCompatibleInterface":[18],"Lottery__NotOpen":[187],"Raffle":[429],"Raffle__NotEnoughETHEntered":[183],"Raffle__TransferFailed":[185],"VRFConsumerBaseV2":[80],"VRFCoordinatorV2Interface":[176]},"id":430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":178,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:4"},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":430,"sourceUnit":81,"src":"58:65:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","id":180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":430,"sourceUnit":177,"src":"124:84:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol","id":181,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":430,"sourceUnit":23,"src":"209:91:4","symbolAliases":[],"unitAlias":""},{"id":183,"name":"Raffle__NotEnoughETHEntered","nameLocation":"308:27:4","nodeType":"ErrorDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"335:2:4"},"src":"302:36:4"},{"id":185,"name":"Raffle__TransferFailed","nameLocation":"345:22:4","nodeType":"ErrorDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[],"src":"367:2:4"},"src":"339:31:4"},{"id":187,"name":"Lottery__NotOpen","nameLocation":"377:16:4","nodeType":"ErrorDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[],"src":"393:2:4"},"src":"371:25:4"},{"abstract":false,"baseContracts":[{"baseName":{"id":188,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":80,"src":"417:17:4"},"id":189,"nodeType":"InheritanceSpecifier","src":"417:17:4"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":429,"linearizedBaseContracts":[429,80],"name":"Raffle","nameLocation":"407:6:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Raffle.LotteryState","id":192,"members":[{"id":190,"name":"OPEN","nameLocation":"469:4:4","nodeType":"EnumValue","src":"469:4:4"},{"id":191,"name":"CALCULATING","nameLocation":"483:11:4","nodeType":"EnumValue","src":"483:11:4"}],"name":"LotteryState","nameLocation":"446:12:4","nodeType":"EnumDefinition","src":"441:59:4"},{"constant":false,"id":194,"mutability":"immutable","name":"i_entryFee","nameLocation":"555:10:4","nodeType":"VariableDeclaration","scope":429,"src":"529:36:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":193,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":197,"mutability":"mutable","name":"s_players","nameLocation":"597:9:4","nodeType":"VariableDeclaration","scope":429,"src":"571:35:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"571:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":196,"nodeType":"ArrayTypeName","src":"571:17:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":200,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"656:16:4","nodeType":"VariableDeclaration","scope":429,"src":"612:60:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":199,"nodeType":"UserDefinedTypeName","pathNode":{"id":198,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":176,"src":"612:25:4"},"referencedDeclaration":176,"src":"612:25:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":202,"mutability":"immutable","name":"i_gaslane","nameLocation":"704:9:4","nodeType":"VariableDeclaration","scope":429,"src":"678:35:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":201,"name":"bytes32","nodeType":"ElementaryTypeName","src":"678:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":204,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"744:16:4","nodeType":"VariableDeclaration","scope":429,"src":"719:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":203,"name":"uint64","nodeType":"ElementaryTypeName","src":"719:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":true,"id":207,"mutability":"constant","name":"NUM_REQUEST_CONFIRMATIONS","nameLocation":"790:25:4","nodeType":"VariableDeclaration","scope":429,"src":"766:53:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":205,"name":"uint16","nodeType":"ElementaryTypeName","src":"766:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"818:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":209,"mutability":"immutable","name":"i_callBackGasLimit","nameLocation":"850:18:4","nodeType":"VariableDeclaration","scope":429,"src":"825:43:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":208,"name":"uint32","nodeType":"ElementaryTypeName","src":"825:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":212,"mutability":"constant","name":"NUM_WORDS","nameLocation":"898:9:4","nodeType":"VariableDeclaration","scope":429,"src":"874:37:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":210,"name":"uint32","nodeType":"ElementaryTypeName","src":"874:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"910:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":215,"mutability":"mutable","name":"s_lotteryState","nameLocation":"938:14:4","nodeType":"VariableDeclaration","scope":429,"src":"917:35:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"},"typeName":{"id":214,"nodeType":"UserDefinedTypeName","pathNode":{"id":213,"name":"LotteryState","nodeType":"IdentifierPath","referencedDeclaration":192,"src":"917:12:4"},"referencedDeclaration":192,"src":"917:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"visibility":"private"},{"constant":false,"id":217,"mutability":"mutable","name":"s_latestWinner","nameLocation":"975:14:4","nodeType":"VariableDeclaration","scope":429,"src":"959:30:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"959:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":221,"name":"LotteryEnter","nameLocation":"1016:12:4","nodeType":"EventDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1045:6:4","nodeType":"VariableDeclaration","scope":221,"src":"1029:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":218,"name":"address","nodeType":"ElementaryTypeName","src":"1029:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1028:24:4"},"src":"1010:43:4"},{"anonymous":false,"id":225,"name":"RequestedLotteryWinner","nameLocation":"1064:22:4","nodeType":"EventDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"indexed":true,"mutability":"mutable","name":"requestID","nameLocation":"1103:9:4","nodeType":"VariableDeclaration","scope":225,"src":"1087:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1087:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1086:27:4"},"src":"1058:56:4"},{"anonymous":false,"id":229,"name":"PickedWinner","nameLocation":"1125:12:4","nodeType":"EventDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1154:6:4","nodeType":"VariableDeclaration","scope":229,"src":"1138:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"1138:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1137:24:4"},"src":"1119:43:4"},{"body":{"id":272,"nodeType":"Block","src":"1374:276:4","statements":[{"expression":{"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":245,"name":"i_entryFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1384:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":246,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1397:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1384:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":248,"nodeType":"ExpressionStatement","src":"1384:24:4"},{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":249,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"1418:16:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":251,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1463:16:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":250,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"1437:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$176_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1437:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1418:62:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"id":254,"nodeType":"ExpressionStatement","src":"1418:62:4"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":255,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"1490:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"1502:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1490:19:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"1490:19:4"},{"expression":{"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":259,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"1519:16:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":260,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1538:14:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1519:33:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":262,"nodeType":"ExpressionStatement","src":"1519:33:4"},{"expression":{"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":263,"name":"i_callBackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"1562:18:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":264,"name":"callBackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"1583:16:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1562:37:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":266,"nodeType":"ExpressionStatement","src":"1562:37:4"},{"expression":{"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":267,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1609:14:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":268,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1626:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Raffle.LotteryState)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"1626:17:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"src":"1609:34:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"id":271,"nodeType":"ExpressionStatement","src":"1609:34:4"}]},"id":273,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":242,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1356:16:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":243,"kind":"baseConstructorSpecifier","modifierName":{"id":241,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":80,"src":"1338:17:4"},"nodeType":"ModifierInvocation","src":"1338:35:4"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"entranceFee","nameLocation":"1197:11:4","nodeType":"VariableDeclaration","scope":273,"src":"1189:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"1189:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1226:16:4","nodeType":"VariableDeclaration","scope":273,"src":"1218:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"1218:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"gasLane","nameLocation":"1260:7:4","nodeType":"VariableDeclaration","scope":273,"src":"1252:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1252:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"subscriptionId","nameLocation":"1284:14:4","nodeType":"VariableDeclaration","scope":273,"src":"1277:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":236,"name":"uint64","nodeType":"ElementaryTypeName","src":"1277:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"callBackGasLimit","nameLocation":"1315:16:4","nodeType":"VariableDeclaration","scope":273,"src":"1308:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":238,"name":"uint32","nodeType":"ElementaryTypeName","src":"1308:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1179:158:4"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[],"src":"1374:0:4"},"scope":429,"src":"1168:482:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":309,"nodeType":"Block","src":"1695:335:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":276,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1709:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1709:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":278,"name":"i_entryFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1721:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1709:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":284,"nodeType":"IfStatement","src":"1705:89:4","trueBody":{"id":283,"nodeType":"Block","src":"1733:61:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":280,"name":"Raffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"1754:27:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1754:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":282,"nodeType":"RevertStatement","src":"1747:36:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":285,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1807:14:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":286,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1825:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Raffle.LotteryState)"}},"id":287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"1825:17:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"src":"1807:35:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":293,"nodeType":"IfStatement","src":"1803:91:4","trueBody":{"id":292,"nodeType":"Block","src":"1844:50:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":289,"name":"Lottery__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1865:16:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1865:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":291,"nodeType":"RevertStatement","src":"1858:25:4"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":299,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1926:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1926:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1918:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"1918:8:4","stateMutability":"payable","typeDescriptions":{}}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1918:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":294,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"1903:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"1903:14:4","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1903:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":303,"nodeType":"ExpressionStatement","src":"1903:35:4"},{"eventCall":{"arguments":[{"expression":{"id":305,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1966:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1966:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":304,"name":"LotteryEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"1953:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1953:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":308,"nodeType":"EmitStatement","src":"1948:29:4"}]},"functionSelector":"c1af5785","id":310,"implemented":true,"kind":"function","modifiers":[],"name":"enterLottery","nameLocation":"1665:12:4","nodeType":"FunctionDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[],"src":"1677:2:4"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[],"src":"1695:0:4"},"scope":429,"src":"1656:374:4","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":333,"nodeType":"Block","src":"2154:328:4","statements":[{"expression":{"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":313,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2164:14:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":314,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2181:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Raffle.LotteryState)"}},"id":315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":191,"src":"2181:24:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"src":"2164:41:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"id":317,"nodeType":"ExpressionStatement","src":"2164:41:4"},{"assignments":[319],"declarations":[{"constant":false,"id":319,"mutability":"mutable","name":"requestID","nameLocation":"2223:9:4","nodeType":"VariableDeclaration","scope":333,"src":"2215:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":328,"initialValue":{"arguments":[{"id":322,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2284:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":323,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2307:16:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":324,"name":"NUM_REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"2337:25:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":325,"name":"i_callBackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2376:18:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":326,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"2408:9:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":320,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"2235:16:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":109,"src":"2235:35:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2235:192:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2215:212:4"},{"eventCall":{"arguments":[{"id":330,"name":"requestID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2465:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":329,"name":"RequestedLotteryWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"2442:22:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2442:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":332,"nodeType":"EmitStatement","src":"2437:38:4"}]},"functionSelector":"35039208","id":334,"implemented":true,"kind":"function","modifiers":[],"name":"requestForRandomWinner","nameLocation":"2120:22:4","nodeType":"FunctionDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[],"src":"2142:2:4"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[],"src":"2154:0:4"},"scope":429,"src":"2111:371:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[53],"body":{"id":399,"nodeType":"Block","src":"2583:464:4","statements":[{"assignments":[344],"declarations":[{"constant":false,"id":344,"mutability":"mutable","name":"winnerIndex","nameLocation":"2601:11:4","nodeType":"VariableDeclaration","scope":399,"src":"2593:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":343,"name":"uint256","nodeType":"ElementaryTypeName","src":"2593:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":351,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":345,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"2615:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":347,"indexExpression":{"hexValue":"30","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2627:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2615:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":348,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"2632:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2632:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2615:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2593:55:4"},{"assignments":[353],"declarations":[{"constant":false,"id":353,"mutability":"mutable","name":"latestWinner","nameLocation":"2674:12:4","nodeType":"VariableDeclaration","scope":399,"src":"2658:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"2658:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":357,"initialValue":{"baseExpression":{"id":354,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"2689:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":356,"indexExpression":{"id":355,"name":"winnerIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"2699:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2689:22:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"2658:53:4"},{"expression":{"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":358,"name":"s_latestWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2721:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":359,"name":"latestWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"2738:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2721:29:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":361,"nodeType":"ExpressionStatement","src":"2721:29:4"},{"expression":{"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":362,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"2760:14:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":363,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2777:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$192_$","typeString":"type(enum Raffle.LotteryState)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":190,"src":"2777:17:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"src":"2760:34:4","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$192","typeString":"enum Raffle.LotteryState"}},"id":366,"nodeType":"ExpressionStatement","src":"2760:34:4"},{"expression":{"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":367,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"2804:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2838:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2816:21:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"2820:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":369,"nodeType":"ArrayTypeName","src":"2820:17:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2816:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"2804:36:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":374,"nodeType":"ExpressionStatement","src":"2804:36:4"},{"assignments":[376,null],"declarations":[{"constant":false,"id":376,"mutability":"mutable","name":"success","nameLocation":"2856:7:4","nodeType":"VariableDeclaration","scope":399,"src":"2851:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":375,"name":"bool","nodeType":"ElementaryTypeName","src":"2851:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":387,"initialValue":{"arguments":[{"hexValue":"","id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2917:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":377,"name":"latestWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"2869:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2869:17:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":381,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2902:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$429","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$429","typeString":"contract Raffle"}],"id":380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2894:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":379,"name":"address","nodeType":"ElementaryTypeName","src":"2894:7:4","typeDescriptions":{}}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2894:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2894:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2869:47:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2869:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2850:70:4"},{"condition":{"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2934:8:4","subExpression":{"id":388,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2935:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":394,"nodeType":"IfStatement","src":"2930:70:4","trueBody":{"id":393,"nodeType":"Block","src":"2944:56:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":390,"name":"Raffle__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2965:22:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2965:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"RevertStatement","src":"2958:31:4"}]}},{"eventCall":{"arguments":[{"id":396,"name":"latestWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"3027:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":395,"name":"PickedWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"3014:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3014:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":398,"nodeType":"EmitStatement","src":"3009:31:4"}]},"id":400,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2497:18:4","nodeType":"FunctionDefinition","overrides":{"id":341,"nodeType":"OverrideSpecifier","overrides":[],"src":"2574:8:4"},"parameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"requestID","nameLocation":"2524:9:4","nodeType":"VariableDeclaration","scope":400,"src":"2516:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"2516:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"randomWords","nameLocation":"2552:11:4","nodeType":"VariableDeclaration","scope":400,"src":"2535:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":337,"name":"uint256","nodeType":"ElementaryTypeName","src":"2535:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":338,"nodeType":"ArrayTypeName","src":"2535:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2515:49:4"},"returnParameters":{"id":342,"nodeType":"ParameterList","parameters":[],"src":"2583:0:4"},"scope":429,"src":"2488:559:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":407,"nodeType":"Block","src":"3106:34:4","statements":[{"expression":{"id":405,"name":"i_entryFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"3123:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":404,"id":406,"nodeType":"Return","src":"3116:17:4"}]},"functionSelector":"e586a4f0","id":408,"implemented":true,"kind":"function","modifiers":[],"name":"getEntryFee","nameLocation":"3062:11:4","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[],"src":"3073:2:4"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":408,"src":"3097:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"3097:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3096:9:4"},"scope":429,"src":"3053:87:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":419,"nodeType":"Block","src":"3210:40:4","statements":[{"expression":{"baseExpression":{"id":415,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"3227:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":417,"indexExpression":{"id":416,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"3237:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3227:16:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":414,"id":418,"nodeType":"Return","src":"3220:23:4"}]},"functionSelector":"e55ae4e8","id":420,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"3155:9:4","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"index","nameLocation":"3173:5:4","nodeType":"VariableDeclaration","scope":420,"src":"3165:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":409,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:15:4"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":420,"src":"3201:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":412,"name":"address","nodeType":"ElementaryTypeName","src":"3201:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3200:9:4"},"scope":429,"src":"3146:104:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":427,"nodeType":"Block","src":"3313:38:4","statements":[{"expression":{"id":425,"name":"s_latestWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"3330:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":424,"id":426,"nodeType":"Return","src":"3323:21:4"}]},"functionSelector":"4fdd3b64","id":428,"implemented":true,"kind":"function","modifiers":[],"name":"getLatestWinner","nameLocation":"3265:15:4","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[],"src":"3280:2:4"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":428,"src":"3304:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"3304:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3303:9:4"},"scope":429,"src":"3256:95:4","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":430,"src":"398:2955:4","usedErrors":[31,183,185,187]}],"src":"33:3321:4"},"id":4}},"contracts":{"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/raffle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callBackGasLimit","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Lottery__NotOpen","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"Raffle__TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"LotteryEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"PickedWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestID","type":"uint256"}],"name":"RequestedLotteryWinner","type":"event"},{"inputs":[],"name":"enterLottery","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntryFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLatestWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestForRandomWinner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_273":{"entryPoint":null,"id":273,"parameterSlots":5,"returnSlots":0},"@_44":{"entryPoint":null,"id":44,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":297,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":389,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_bytes32t_uint64t_uint32_fromMemory":{"entryPoint":412,"id":null,"parameterSlots":2,"returnSlots":5},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":548,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":568,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":578,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":610,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":620,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":636,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":656,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":703,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":708,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":734,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":760,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":786,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":812,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3479:5","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:5","statements":[{"nodeType":"YulAssignment","src":"80:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:5"},"nodeType":"YulFunctionCall","src":"89:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:5"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:5"},"nodeType":"YulFunctionCall","src":"111:33:5"},"nodeType":"YulExpressionStatement","src":"111:33:5"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:5","type":""}],"src":"7:143:5"},{"body":{"nodeType":"YulBlock","src":"219:80:5","statements":[{"nodeType":"YulAssignment","src":"229:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:5"},"nodeType":"YulFunctionCall","src":"238:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:5"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"260:26:5"},"nodeType":"YulFunctionCall","src":"260:33:5"},"nodeType":"YulExpressionStatement","src":"260:33:5"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:5","type":""}],"src":"156:143:5"},{"body":{"nodeType":"YulBlock","src":"368:80:5","statements":[{"nodeType":"YulAssignment","src":"378:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"393:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"387:5:5"},"nodeType":"YulFunctionCall","src":"387:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"409:26:5"},"nodeType":"YulFunctionCall","src":"409:33:5"},"nodeType":"YulExpressionStatement","src":"409:33:5"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"346:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"354:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"362:5:5","type":""}],"src":"305:143:5"},{"body":{"nodeType":"YulBlock","src":"516:79:5","statements":[{"nodeType":"YulAssignment","src":"526:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"541:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:5"},"nodeType":"YulFunctionCall","src":"535:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"526:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"583:5:5"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"557:25:5"},"nodeType":"YulFunctionCall","src":"557:32:5"},"nodeType":"YulExpressionStatement","src":"557:32:5"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"494:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"502:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"510:5:5","type":""}],"src":"454:141:5"},{"body":{"nodeType":"YulBlock","src":"663:79:5","statements":[{"nodeType":"YulAssignment","src":"673:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"688:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"682:5:5"},"nodeType":"YulFunctionCall","src":"682:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:5"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"704:25:5"},"nodeType":"YulFunctionCall","src":"704:32:5"},"nodeType":"YulExpressionStatement","src":"704:32:5"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"641:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"649:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"657:5:5","type":""}],"src":"601:141:5"},{"body":{"nodeType":"YulBlock","src":"891:830:5","statements":[{"body":{"nodeType":"YulBlock","src":"938:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"940:77:5"},"nodeType":"YulFunctionCall","src":"940:79:5"},"nodeType":"YulExpressionStatement","src":"940:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"912:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"921:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"908:3:5"},"nodeType":"YulFunctionCall","src":"908:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"933:3:5","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"904:3:5"},"nodeType":"YulFunctionCall","src":"904:33:5"},"nodeType":"YulIf","src":"901:120:5"},{"nodeType":"YulBlock","src":"1031:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1046:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1060:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1050:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1075:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1121:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1132:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1117:3:5"},"nodeType":"YulFunctionCall","src":"1117:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1141:7:5"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1085:31:5"},"nodeType":"YulFunctionCall","src":"1085:64:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1075:6:5"}]}]},{"nodeType":"YulBlock","src":"1169:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1184:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1198:2:5","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1188:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1214:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1260:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1271:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1256:3:5"},"nodeType":"YulFunctionCall","src":"1256:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1280:7:5"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1224:31:5"},"nodeType":"YulFunctionCall","src":"1224:64:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1214:6:5"}]}]},{"nodeType":"YulBlock","src":"1308:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1323:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1337:2:5","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1327:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1353:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1399:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1410:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1395:3:5"},"nodeType":"YulFunctionCall","src":"1395:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1419:7:5"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"1363:31:5"},"nodeType":"YulFunctionCall","src":"1363:64:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1353:6:5"}]}]},{"nodeType":"YulBlock","src":"1447:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1462:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1476:2:5","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1466:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1492:73:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1548:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:5"},"nodeType":"YulFunctionCall","src":"1533:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1557:7:5"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"1502:30:5"},"nodeType":"YulFunctionCall","src":"1502:63:5"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1492:6:5"}]}]},{"nodeType":"YulBlock","src":"1585:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1600:17:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1614:3:5","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1604:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1631:73:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1676:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1687:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1672:3:5"},"nodeType":"YulFunctionCall","src":"1672:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1696:7:5"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1641:30:5"},"nodeType":"YulFunctionCall","src":"1641:63:5"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1631:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_bytes32t_uint64t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"829:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"840:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"852:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"860:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"868:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"876:6:5","type":""},{"name":"value4","nodeType":"YulTypedName","src":"884:6:5","type":""}],"src":"748:973:5"},{"body":{"nodeType":"YulBlock","src":"1767:35:5","statements":[{"nodeType":"YulAssignment","src":"1777:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1793:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1787:5:5"},"nodeType":"YulFunctionCall","src":"1787:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1777:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1760:6:5","type":""}],"src":"1727:75:5"},{"body":{"nodeType":"YulBlock","src":"1853:51:5","statements":[{"nodeType":"YulAssignment","src":"1863:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:5"},"nodeType":"YulFunctionCall","src":"1874:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:5","type":""}],"src":"1808:96:5"},{"body":{"nodeType":"YulBlock","src":"1955:32:5","statements":[{"nodeType":"YulAssignment","src":"1965:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"1976:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1965:7:5"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1937:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1947:7:5","type":""}],"src":"1910:77:5"},{"body":{"nodeType":"YulBlock","src":"2038:81:5","statements":[{"nodeType":"YulAssignment","src":"2048:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2063:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"2070:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2059:3:5"},"nodeType":"YulFunctionCall","src":"2059:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2048:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2020:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2030:7:5","type":""}],"src":"1993:126:5"},{"body":{"nodeType":"YulBlock","src":"2170:32:5","statements":[{"nodeType":"YulAssignment","src":"2180:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"2191:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2180:7:5"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2152:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2162:7:5","type":""}],"src":"2125:77:5"},{"body":{"nodeType":"YulBlock","src":"2252:49:5","statements":[{"nodeType":"YulAssignment","src":"2262:33:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2277:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"2284:10:5","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2273:3:5"},"nodeType":"YulFunctionCall","src":"2273:22:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2262:7:5"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2234:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2244:7:5","type":""}],"src":"2208:93:5"},{"body":{"nodeType":"YulBlock","src":"2351:57:5","statements":[{"nodeType":"YulAssignment","src":"2361:41:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2376:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"2383:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2372:3:5"},"nodeType":"YulFunctionCall","src":"2372:30:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2361:7:5"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2333:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2343:7:5","type":""}],"src":"2307:101:5"},{"body":{"nodeType":"YulBlock","src":"2442:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2459:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2462:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2452:6:5"},"nodeType":"YulFunctionCall","src":"2452:88:5"},"nodeType":"YulExpressionStatement","src":"2452:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2556:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2559:4:5","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2549:6:5"},"nodeType":"YulFunctionCall","src":"2549:15:5"},"nodeType":"YulExpressionStatement","src":"2549:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2580:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2583:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2573:6:5"},"nodeType":"YulFunctionCall","src":"2573:15:5"},"nodeType":"YulExpressionStatement","src":"2573:15:5"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"2414:180:5"},{"body":{"nodeType":"YulBlock","src":"2689:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2706:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2709:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2699:6:5"},"nodeType":"YulFunctionCall","src":"2699:12:5"},"nodeType":"YulExpressionStatement","src":"2699:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2600:117:5"},{"body":{"nodeType":"YulBlock","src":"2812:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2829:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2832:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2822:6:5"},"nodeType":"YulFunctionCall","src":"2822:12:5"},"nodeType":"YulExpressionStatement","src":"2822:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2723:117:5"},{"body":{"nodeType":"YulBlock","src":"2889:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"2946:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2955:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2958:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2948:6:5"},"nodeType":"YulFunctionCall","src":"2948:12:5"},"nodeType":"YulExpressionStatement","src":"2948:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2912:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2937:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2919:17:5"},"nodeType":"YulFunctionCall","src":"2919:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2909:2:5"},"nodeType":"YulFunctionCall","src":"2909:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2902:6:5"},"nodeType":"YulFunctionCall","src":"2902:43:5"},"nodeType":"YulIf","src":"2899:63:5"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2882:5:5","type":""}],"src":"2846:122:5"},{"body":{"nodeType":"YulBlock","src":"3017:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"3074:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3083:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3086:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3076:6:5"},"nodeType":"YulFunctionCall","src":"3076:12:5"},"nodeType":"YulExpressionStatement","src":"3076:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3040:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3065:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3047:17:5"},"nodeType":"YulFunctionCall","src":"3047:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3037:2:5"},"nodeType":"YulFunctionCall","src":"3037:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3030:6:5"},"nodeType":"YulFunctionCall","src":"3030:43:5"},"nodeType":"YulIf","src":"3027:63:5"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3010:5:5","type":""}],"src":"2974:122:5"},{"body":{"nodeType":"YulBlock","src":"3145:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"3202:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3211:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3214:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3204:6:5"},"nodeType":"YulFunctionCall","src":"3204:12:5"},"nodeType":"YulExpressionStatement","src":"3204:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3168:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3193:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3175:17:5"},"nodeType":"YulFunctionCall","src":"3175:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3165:2:5"},"nodeType":"YulFunctionCall","src":"3165:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3158:6:5"},"nodeType":"YulFunctionCall","src":"3158:43:5"},"nodeType":"YulIf","src":"3155:63:5"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3138:5:5","type":""}],"src":"3102:122:5"},{"body":{"nodeType":"YulBlock","src":"3272:78:5","statements":[{"body":{"nodeType":"YulBlock","src":"3328:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3337:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3340:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3330:6:5"},"nodeType":"YulFunctionCall","src":"3330:12:5"},"nodeType":"YulExpressionStatement","src":"3330:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3295:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3319:5:5"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"3302:16:5"},"nodeType":"YulFunctionCall","src":"3302:23:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3292:2:5"},"nodeType":"YulFunctionCall","src":"3292:34:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3285:6:5"},"nodeType":"YulFunctionCall","src":"3285:42:5"},"nodeType":"YulIf","src":"3282:62:5"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3265:5:5","type":""}],"src":"3230:120:5"},{"body":{"nodeType":"YulBlock","src":"3398:78:5","statements":[{"body":{"nodeType":"YulBlock","src":"3454:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3463:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3466:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3456:6:5"},"nodeType":"YulFunctionCall","src":"3456:12:5"},"nodeType":"YulExpressionStatement","src":"3456:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3421:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3445:5:5"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3428:16:5"},"nodeType":"YulFunctionCall","src":"3428:23:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3418:2:5"},"nodeType":"YulFunctionCall","src":"3418:34:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3411:6:5"},"nodeType":"YulFunctionCall","src":"3411:42:5"},"nodeType":"YulIf","src":"3408:62:5"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3391:5:5","type":""}],"src":"3356:120:5"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_bytes32t_uint64t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b50604051620011193803806200111983398181016040528101906200003891906200019c565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508167ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508063ffffffff166101208163ffffffff1660e01b815250506000600160006101000a81548160ff0219169083600181111562000119576200011862000290565b5b0217905550505050505062000346565b6000815190506200013a81620002c4565b92915050565b6000815190506200015181620002de565b92915050565b6000815190506200016881620002f8565b92915050565b6000815190506200017f8162000312565b92915050565b60008151905062000196816200032c565b92915050565b600080600080600060a08688031215620001bb57620001ba620002bf565b5b6000620001cb8882890162000157565b9550506020620001de8882890162000129565b9450506040620001f18882890162000140565b9350506060620002048882890162000185565b925050608062000217888289016200016e565b9150509295509295909350565b6000620002318262000242565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002cf8162000224565b8114620002db57600080fd5b50565b620002e98162000238565b8114620002f557600080fd5b50565b620003038162000262565b81146200030f57600080fd5b50565b6200031d816200026c565b81146200032957600080fd5b50565b62000337816200027c565b81146200034357600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610d69620003b060003960006102a5015260006102820152600061026101526000610225015260008181610394015261054c015260008181610139015261018d0152610d696000f3fe6080604052600436106100555760003560e01c80631fe543e31461005a57806335039208146100835780634fdd3b641461009a578063c1af5785146100c5578063e55ae4e8146100cf578063e586a4f01461010c575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610962565b610137565b005b34801561008f57600080fd5b506100986101f7565b005b3480156100a657600080fd5b506100af61036a565b6040516100bc9190610a50565b60405180910390f35b6100cd610392565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610908565b610501565b6040516101039190610a50565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610ae7565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101e0929190610a6b565b60405180910390fd5b6101f38282610570565b5050565b60018060006101000a81548160ff0219169083600181111561021c5761021b610c67565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016102e6959493929190610a94565b602060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190610935565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156103ec576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610400576103ff610c67565b5b600160009054906101000a900460ff16600181111561042257610421610c67565b5b14610459576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061051657610515610c96565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080805490508260008151811061058b5761058a610c96565b5b602002602001015161059d9190610c07565b905060008082815481106105b4576105b3610c96565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561064757610646610c67565b5b0217905550600067ffffffffffffffff81111561066757610666610cc5565b5b6040519080825280602002602001820160405280156106955781602001602082028036833780820191505090505b50600090805190602001906106ab929190610799565b5060008173ffffffffffffffffffffffffffffffffffffffff16476040516106d290610a3b565b60006040518083038185875af1925050503d806000811461070f576040519150601f19603f3d011682016040523d82523d6000602084013e610714565b606091505b505090508061074f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb112587e57bfa970257f3d54fc52859c6300f6bd7a982462c320fed45c2530ed60405160405180910390a25050505050565b828054828255906000526020600020908101928215610812579160200282015b828111156108115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107b9565b5b50905061081f9190610823565b5090565b5b8082111561083c576000816000905550600101610824565b5090565b600061085361084e84610b27565b610b02565b9050808382526020820190508285602086028201111561087657610875610cf9565b5b60005b858110156108a6578161088c88826108de565b845260208401935060208301925050600181019050610879565b5050509392505050565b600082601f8301126108c5576108c4610cf4565b5b81356108d5848260208601610840565b91505092915050565b6000813590506108ed81610d1c565b92915050565b60008151905061090281610d1c565b92915050565b60006020828403121561091e5761091d610d03565b5b600061092c848285016108de565b91505092915050565b60006020828403121561094b5761094a610d03565b5b6000610959848285016108f3565b91505092915050565b6000806040838503121561097957610978610d03565b5b6000610987858286016108de565b925050602083013567ffffffffffffffff8111156109a8576109a7610cfe565b5b6109b4858286016108b0565b9150509250929050565b6109c781610b5e565b82525050565b6109d681610b70565b82525050565b60006109e9600083610b53565b91506109f482610d19565b600082019050919050565b610a0881610b7a565b82525050565b610a1781610ba8565b82525050565b610a2681610bb2565b82525050565b610a3581610bc2565b82525050565b6000610a46826109dc565b9150819050919050565b6000602082019050610a6560008301846109be565b92915050565b6000604082019050610a8060008301856109be565b610a8d60208301846109be565b9392505050565b600060a082019050610aa960008301886109cd565b610ab66020830187610a2c565b610ac360408301866109ff565b610ad06060830185610a1d565b610add6080830184610a1d565b9695505050505050565b6000602082019050610afc6000830184610a0e565b92915050565b6000610b0c610b1d565b9050610b188282610bd6565b919050565b6000604051905090565b600067ffffffffffffffff821115610b4257610b41610cc5565b5b602082029050602081019050919050565b600081905092915050565b6000610b6982610b88565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b610bdf82610d08565b810181811067ffffffffffffffff82111715610bfe57610bfd610cc5565b5b80604052505050565b6000610c1282610ba8565b9150610c1d83610ba8565b925082610c2d57610c2c610c38565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b610d2581610ba8565b8114610d3057600080fd5b5056fea2646970667358221220b32a7c02b4cc2d7a975c6ec30dac2dcb14dc6a15d72d6a68c0b049992eccf86864736f6c63430008070033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1119 CODESIZE SUB DUP1 PUSH3 0x1119 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x19C JUMP JUMPDEST DUP4 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP5 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP3 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x120 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x119 JUMPI PUSH3 0x118 PUSH3 0x290 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP PUSH3 0x346 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x13A DUP2 PUSH3 0x2C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x151 DUP2 PUSH3 0x2DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x168 DUP2 PUSH3 0x2F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x17F DUP2 PUSH3 0x312 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x196 DUP2 PUSH3 0x32C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x1BB JUMPI PUSH3 0x1BA PUSH3 0x2BF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1CB DUP9 DUP3 DUP10 ADD PUSH3 0x157 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH3 0x1DE DUP9 DUP3 DUP10 ADD PUSH3 0x129 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH3 0x1F1 DUP9 DUP3 DUP10 ADD PUSH3 0x140 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH3 0x204 DUP9 DUP3 DUP10 ADD PUSH3 0x185 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH3 0x217 DUP9 DUP3 DUP10 ADD PUSH3 0x16E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x231 DUP3 PUSH3 0x242 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2CF DUP2 PUSH3 0x224 JUMP JUMPDEST DUP2 EQ PUSH3 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2E9 DUP2 PUSH3 0x238 JUMP JUMPDEST DUP2 EQ PUSH3 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x303 DUP2 PUSH3 0x262 JUMP JUMPDEST DUP2 EQ PUSH3 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x31D DUP2 PUSH3 0x26C JUMP JUMPDEST DUP2 EQ PUSH3 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x337 DUP2 PUSH3 0x27C JUMP JUMPDEST DUP2 EQ PUSH3 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xC0 SHR PUSH2 0x120 MLOAD PUSH1 0xE0 SHR PUSH2 0xD69 PUSH3 0x3B0 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x2A5 ADD MSTORE PUSH1 0x0 PUSH2 0x282 ADD MSTORE PUSH1 0x0 PUSH2 0x261 ADD MSTORE PUSH1 0x0 PUSH2 0x225 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x394 ADD MSTORE PUSH2 0x54C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x139 ADD MSTORE PUSH2 0x18D ADD MSTORE PUSH2 0xD69 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x35039208 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x4FDD3B64 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xE586A4F0 EQ PUSH2 0x10C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x962 JUMP JUMPDEST PUSH2 0x137 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x98 PUSH2 0x1F7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAF PUSH2 0x36A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBC SWAP2 SWAP1 PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCD PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x501 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x103 SWAP2 SWAP1 PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x548 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0xAE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E9 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E0 SWAP3 SWAP2 SWAP1 PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F3 DUP3 DUP3 PUSH2 0x570 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x21C JUMPI PUSH2 0x21B PUSH2 0xC67 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x935 JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xEBF56642252004C18A776F30D528E7A0CE8C5DB14B6596FB6550F630C8A24C6C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x3EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x400 JUMPI PUSH2 0x3FF PUSH2 0xC67 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x422 JUMPI PUSH2 0x421 PUSH2 0xC67 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x459 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE76BE6FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D64FB5BA9F2548C5B98468D58F25B87B9E866AFEE0122E92D9FE722BF85076C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x516 JUMPI PUSH2 0x515 PUSH2 0xC96 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x58B JUMPI PUSH2 0x58A PUSH2 0xC96 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x59D SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x5B4 JUMPI PUSH2 0x5B3 PUSH2 0xC96 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x647 JUMPI PUSH2 0x646 PUSH2 0xC67 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x667 JUMPI PUSH2 0x666 PUSH2 0xCC5 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x695 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x6AB SWAP3 SWAP2 SWAP1 PUSH2 0x799 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x6D2 SWAP1 PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x714 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x74F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB112587E57BFA970257F3D54FC52859C6300F6BD7A982462C320FED45C2530ED PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x812 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x811 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x7B9 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x81F SWAP2 SWAP1 PUSH2 0x823 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x83C JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x824 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x853 PUSH2 0x84E DUP5 PUSH2 0xB27 JUMP JUMPDEST PUSH2 0xB02 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x876 JUMPI PUSH2 0x875 PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8A6 JUMPI DUP2 PUSH2 0x88C DUP9 DUP3 PUSH2 0x8DE JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x879 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8C5 JUMPI PUSH2 0x8C4 PUSH2 0xCF4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8D5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x840 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8ED DUP2 PUSH2 0xD1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x902 DUP2 PUSH2 0xD1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91E JUMPI PUSH2 0x91D PUSH2 0xD03 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x92C DUP5 DUP3 DUP6 ADD PUSH2 0x8DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x94B JUMPI PUSH2 0x94A PUSH2 0xD03 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x959 DUP5 DUP3 DUP6 ADD PUSH2 0x8F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x979 JUMPI PUSH2 0x978 PUSH2 0xD03 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x987 DUP6 DUP3 DUP7 ADD PUSH2 0x8DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9A8 JUMPI PUSH2 0x9A7 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x9B4 DUP6 DUP3 DUP7 ADD PUSH2 0x8B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C7 DUP2 PUSH2 0xB5E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x9D6 DUP2 PUSH2 0xB70 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E9 PUSH1 0x0 DUP4 PUSH2 0xB53 JUMP JUMPDEST SWAP2 POP PUSH2 0x9F4 DUP3 PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA08 DUP2 PUSH2 0xB7A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA17 DUP2 PUSH2 0xBA8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA26 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA35 DUP2 PUSH2 0xBC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA46 DUP3 PUSH2 0x9DC JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x9BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xA80 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x9BE JUMP JUMPDEST PUSH2 0xA8D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xAA9 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x9CD JUMP JUMPDEST PUSH2 0xAB6 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xA2C JUMP JUMPDEST PUSH2 0xAC3 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x9FF JUMP JUMPDEST PUSH2 0xAD0 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xA1D JUMP JUMPDEST PUSH2 0xADD PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xA1D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xAFC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA0E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0C PUSH2 0xB1D JUMP JUMPDEST SWAP1 POP PUSH2 0xB18 DUP3 DUP3 PUSH2 0xBD6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB42 JUMPI PUSH2 0xB41 PUSH2 0xCC5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB69 DUP3 PUSH2 0xB88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBDF DUP3 PUSH2 0xD08 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xBFE JUMPI PUSH2 0xBFD PUSH2 0xCC5 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC12 DUP3 PUSH2 0xBA8 JUMP JUMPDEST SWAP2 POP PUSH2 0xC1D DUP4 PUSH2 0xBA8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xC2D JUMPI PUSH2 0xC2C PUSH2 0xC38 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD25 DUP2 PUSH2 0xBA8 JUMP JUMPDEST DUP2 EQ PUSH2 0xD30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0x2A PUSH29 0x2B4CC2D7A975C6EC30DAC2DCB14DC6A15D72D6A68C0B049992ECCF868 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"398:2955:4:-:0;;;1168:482;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1356:16;5700:15:2;5683:32;;;;;;;;;;;;5640:80;1397:11:4::1;1384:24;;;;::::0;::::1;1463:16;1418:62;;;;;;;;;;::::0;::::1;1502:7;1490:19;;;;::::0;::::1;1538:14;1519:33;;;;;;;;;;::::0;::::1;1583:16;1562:37;;;;;;;;;;::::0;::::1;1626:17;1609:14;;:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;1168:482:::0;;;;;398:2955;;7:143:5;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;156:143;;;;:::o;305:::-;362:5;393:6;387:13;378:22;;409:33;436:5;409:33;:::i;:::-;305:143;;;;:::o;454:141::-;510:5;541:6;535:13;526:22;;557:32;583:5;557:32;:::i;:::-;454:141;;;;:::o;601:::-;657:5;688:6;682:13;673:22;;704:32;730:5;704:32;:::i;:::-;601:141;;;;:::o;748:973::-;852:6;860;868;876;884;933:3;921:9;912:7;908:23;904:33;901:120;;;940:79;;:::i;:::-;901:120;1060:1;1085:64;1141:7;1132:6;1121:9;1117:22;1085:64;:::i;:::-;1075:74;;1031:128;1198:2;1224:64;1280:7;1271:6;1260:9;1256:22;1224:64;:::i;:::-;1214:74;;1169:129;1337:2;1363:64;1419:7;1410:6;1399:9;1395:22;1363:64;:::i;:::-;1353:74;;1308:129;1476:2;1502:63;1557:7;1548:6;1537:9;1533:22;1502:63;:::i;:::-;1492:73;;1447:128;1614:3;1641:63;1696:7;1687:6;1676:9;1672:22;1641:63;:::i;:::-;1631:73;;1585:129;748:973;;;;;;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:77::-;1947:7;1976:5;1965:16;;1910:77;;;:::o;1993:126::-;2030:7;2070:42;2063:5;2059:54;2048:65;;1993:126;;;:::o;2125:77::-;2162:7;2191:5;2180:16;;2125:77;;;:::o;2208:93::-;2244:7;2284:10;2277:5;2273:22;2262:33;;2208:93;;;:::o;2307:101::-;2343:7;2383:18;2376:5;2372:30;2361:41;;2307:101;;;:::o;2414:180::-;2462:77;2459:1;2452:88;2559:4;2556:1;2549:15;2583:4;2580:1;2573:15;2723:117;2832:1;2829;2822:12;2846:122;2919:24;2937:5;2919:24;:::i;:::-;2912:5;2909:35;2899:63;;2958:1;2955;2948:12;2899:63;2846:122;:::o;2974:::-;3047:24;3065:5;3047:24;:::i;:::-;3040:5;3037:35;3027:63;;3086:1;3083;3076:12;3027:63;2974:122;:::o;3102:::-;3175:24;3193:5;3175:24;:::i;:::-;3168:5;3165:35;3155:63;;3214:1;3211;3204:12;3155:63;3102:122;:::o;3230:120::-;3302:23;3319:5;3302:23;:::i;:::-;3295:5;3292:34;3282:62;;3340:1;3337;3330:12;3282:62;3230:120;:::o;3356:::-;3428:23;3445:5;3428:23;:::i;:::-;3421:5;3418:34;3408:62;;3466:1;3463;3456:12;3408:62;3356:120;:::o;398:2955:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@enterLottery_310":{"entryPoint":914,"id":310,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_400":{"entryPoint":1392,"id":400,"parameterSlots":2,"returnSlots":0},"@getEntryFee_408":{"entryPoint":1352,"id":408,"parameterSlots":0,"returnSlots":1},"@getLatestWinner_428":{"entryPoint":874,"id":428,"parameterSlots":0,"returnSlots":1},"@getPlayer_420":{"entryPoint":1281,"id":420,"parameterSlots":1,"returnSlots":1},"@rawFulfillRandomWords_79":{"entryPoint":311,"id":79,"parameterSlots":2,"returnSlots":0},"@requestForRandomWinner_334":{"entryPoint":503,"id":334,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2112,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2224,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2270,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":2291,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2312,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2357,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2402,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2494,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":2509,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2524,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":2559,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2574,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":2589,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":2604,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2619,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2640,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":2667,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":2708,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2791,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2818,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2845,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2855,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2899,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2910,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2928,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":2938,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2952,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2984,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":2994,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":3010,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":3030,"id":null,"parameterSlots":2,"returnSlots":0},"mod_t_uint256":{"entryPoint":3079,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x12":{"entryPoint":3128,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":3175,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3222,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3269,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":3316,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":3321,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":3326,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3331,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3336,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":3353,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":3356,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9238:5","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:5","statements":[{"nodeType":"YulAssignment","src":"136:90:5","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:5"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:5"},"nodeType":"YulFunctionCall","src":"161:64:5"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:5"},"nodeType":"YulFunctionCall","src":"145:81:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:5"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:5","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:5"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:5","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:5"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:5"},"nodeType":"YulFunctionCall","src":"261:21:5"},"nodeType":"YulExpressionStatement","src":"261:21:5"},{"nodeType":"YulAssignment","src":"291:23:5","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:5"},"nodeType":"YulFunctionCall","src":"298:16:5"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:5"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:5","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:5"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:5"},"nodeType":"YulFunctionCall","src":"404:79:5"},"nodeType":"YulExpressionStatement","src":"404:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:5","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:5"},"nodeType":"YulFunctionCall","src":"365:17:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:5"},"nodeType":"YulFunctionCall","src":"356:27:5"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:5"},"nodeType":"YulFunctionCall","src":"353:36:5"},"nodeType":"YulIf","src":"350:143:5"},{"body":{"nodeType":"YulBlock","src":"562:178:5","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:5","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:5"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:5","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:5"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:5"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:5"},"nodeType":"YulFunctionCall","src":"624:37:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:5"},"nodeType":"YulFunctionCall","src":"612:50:5"},"nodeType":"YulExpressionStatement","src":"612:50:5"},{"nodeType":"YulAssignment","src":"675:21:5","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:5"},"nodeType":"YulFunctionCall","src":"682:14:5"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:5"}]},{"nodeType":"YulAssignment","src":"709:21:5","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:5"},"nodeType":"YulFunctionCall","src":"716:14:5"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:5"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:5"},"nodeType":"YulFunctionCall","src":"521:13:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:5","statements":[{"nodeType":"YulAssignment","src":"537:14:5","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:5"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:5"},"nodeType":"YulFunctionCall","src":"542:9:5"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:5"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:5","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:5","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:5","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:5","type":""}]}]},"src":"502:238:5"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:5","type":""}],"src":"24:722:5"},{"body":{"nodeType":"YulBlock","src":"846:293:5","statements":[{"body":{"nodeType":"YulBlock","src":"895:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"897:77:5"},"nodeType":"YulFunctionCall","src":"897:79:5"},"nodeType":"YulExpressionStatement","src":"897:79:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"874:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"882:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"870:3:5"},"nodeType":"YulFunctionCall","src":"870:17:5"},{"name":"end","nodeType":"YulIdentifier","src":"889:3:5"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"866:3:5"},"nodeType":"YulFunctionCall","src":"866:27:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"859:6:5"},"nodeType":"YulFunctionCall","src":"859:35:5"},"nodeType":"YulIf","src":"856:122:5"},{"nodeType":"YulVariableDeclaration","src":"987:34:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1014:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1001:12:5"},"nodeType":"YulFunctionCall","src":"1001:20:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"991:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1030:103:5","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1106:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"1114:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1102:3:5"},"nodeType":"YulFunctionCall","src":"1102:17:5"},{"name":"length","nodeType":"YulIdentifier","src":"1121:6:5"},{"name":"end","nodeType":"YulIdentifier","src":"1129:3:5"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1039:62:5"},"nodeType":"YulFunctionCall","src":"1039:94:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1030:5:5"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"824:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"832:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"840:5:5","type":""}],"src":"769:370:5"},{"body":{"nodeType":"YulBlock","src":"1197:87:5","statements":[{"nodeType":"YulAssignment","src":"1207:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1216:12:5"},"nodeType":"YulFunctionCall","src":"1216:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1272:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1245:26:5"},"nodeType":"YulFunctionCall","src":"1245:33:5"},"nodeType":"YulExpressionStatement","src":"1245:33:5"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1175:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1183:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1191:5:5","type":""}],"src":"1145:139:5"},{"body":{"nodeType":"YulBlock","src":"1353:80:5","statements":[{"nodeType":"YulAssignment","src":"1363:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1378:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1372:5:5"},"nodeType":"YulFunctionCall","src":"1372:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1363:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1421:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1394:26:5"},"nodeType":"YulFunctionCall","src":"1394:33:5"},"nodeType":"YulExpressionStatement","src":"1394:33:5"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1331:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1339:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1347:5:5","type":""}],"src":"1290:143:5"},{"body":{"nodeType":"YulBlock","src":"1505:263:5","statements":[{"body":{"nodeType":"YulBlock","src":"1551:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1553:77:5"},"nodeType":"YulFunctionCall","src":"1553:79:5"},"nodeType":"YulExpressionStatement","src":"1553:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1526:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:5"},"nodeType":"YulFunctionCall","src":"1522:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1518:3:5"},"nodeType":"YulFunctionCall","src":"1518:32:5"},"nodeType":"YulIf","src":"1515:119:5"},{"nodeType":"YulBlock","src":"1644:117:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1659:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1673:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1663:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1688:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1723:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1734:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1719:3:5"},"nodeType":"YulFunctionCall","src":"1719:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1743:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1698:20:5"},"nodeType":"YulFunctionCall","src":"1698:53:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1688:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1475:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1486:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1498:6:5","type":""}],"src":"1439:329:5"},{"body":{"nodeType":"YulBlock","src":"1851:274:5","statements":[{"body":{"nodeType":"YulBlock","src":"1897:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1899:77:5"},"nodeType":"YulFunctionCall","src":"1899:79:5"},"nodeType":"YulExpressionStatement","src":"1899:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1872:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1881:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1868:3:5"},"nodeType":"YulFunctionCall","src":"1868:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1893:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1864:3:5"},"nodeType":"YulFunctionCall","src":"1864:32:5"},"nodeType":"YulIf","src":"1861:119:5"},{"nodeType":"YulBlock","src":"1990:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2005:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"2019:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2009:6:5","type":""}]},{"nodeType":"YulAssignment","src":"2034:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2080:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2091:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2076:3:5"},"nodeType":"YulFunctionCall","src":"2076:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2100:7:5"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2044:31:5"},"nodeType":"YulFunctionCall","src":"2044:64:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2034:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1821:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1832:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1844:6:5","type":""}],"src":"1774:351:5"},{"body":{"nodeType":"YulBlock","src":"2239:576:5","statements":[{"body":{"nodeType":"YulBlock","src":"2285:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2287:77:5"},"nodeType":"YulFunctionCall","src":"2287:79:5"},"nodeType":"YulExpressionStatement","src":"2287:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2260:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"2269:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2256:3:5"},"nodeType":"YulFunctionCall","src":"2256:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"2281:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2252:3:5"},"nodeType":"YulFunctionCall","src":"2252:32:5"},"nodeType":"YulIf","src":"2249:119:5"},{"nodeType":"YulBlock","src":"2378:117:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2393:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"2407:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2397:6:5","type":""}]},{"nodeType":"YulAssignment","src":"2422:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2457:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2453:3:5"},"nodeType":"YulFunctionCall","src":"2453:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2477:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2432:20:5"},"nodeType":"YulFunctionCall","src":"2432:53:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2422:6:5"}]}]},{"nodeType":"YulBlock","src":"2505:303:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2520:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2551:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2562:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2547:3:5"},"nodeType":"YulFunctionCall","src":"2547:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2534:12:5"},"nodeType":"YulFunctionCall","src":"2534:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2524:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"2613:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2615:77:5"},"nodeType":"YulFunctionCall","src":"2615:79:5"},"nodeType":"YulExpressionStatement","src":"2615:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2585:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"2593:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2582:2:5"},"nodeType":"YulFunctionCall","src":"2582:30:5"},"nodeType":"YulIf","src":"2579:117:5"},{"nodeType":"YulAssignment","src":"2710:88:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2770:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2781:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2766:3:5"},"nodeType":"YulFunctionCall","src":"2766:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2790:7:5"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2720:45:5"},"nodeType":"YulFunctionCall","src":"2720:78:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2710:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2201:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2212:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2224:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2232:6:5","type":""}],"src":"2131:684:5"},{"body":{"nodeType":"YulBlock","src":"2886:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2903:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2926:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2908:17:5"},"nodeType":"YulFunctionCall","src":"2908:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2896:6:5"},"nodeType":"YulFunctionCall","src":"2896:37:5"},"nodeType":"YulExpressionStatement","src":"2896:37:5"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2874:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2881:3:5","type":""}],"src":"2821:118:5"},{"body":{"nodeType":"YulBlock","src":"3010:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3027:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3050:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3032:17:5"},"nodeType":"YulFunctionCall","src":"3032:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3020:6:5"},"nodeType":"YulFunctionCall","src":"3020:37:5"},"nodeType":"YulExpressionStatement","src":"3020:37:5"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2998:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3005:3:5","type":""}],"src":"2945:118:5"},{"body":{"nodeType":"YulBlock","src":"3232:235:5","statements":[{"nodeType":"YulAssignment","src":"3242:90:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3325:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"3330:1:5","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"3249:75:5"},"nodeType":"YulFunctionCall","src":"3249:83:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3242:3:5"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3430:3:5"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"3341:88:5"},"nodeType":"YulFunctionCall","src":"3341:93:5"},"nodeType":"YulExpressionStatement","src":"3341:93:5"},{"nodeType":"YulAssignment","src":"3443:18:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3454:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"3459:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3450:3:5"},"nodeType":"YulFunctionCall","src":"3450:11:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3443:3:5"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3220:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3228:3:5","type":""}],"src":"3069:398:5"},{"body":{"nodeType":"YulBlock","src":"3536:52:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3553:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3575:5:5"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"3558:16:5"},"nodeType":"YulFunctionCall","src":"3558:23:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3546:6:5"},"nodeType":"YulFunctionCall","src":"3546:36:5"},"nodeType":"YulExpressionStatement","src":"3546:36:5"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3524:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3531:3:5","type":""}],"src":"3473:115:5"},{"body":{"nodeType":"YulBlock","src":"3659:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3676:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3699:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3681:17:5"},"nodeType":"YulFunctionCall","src":"3681:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3669:6:5"},"nodeType":"YulFunctionCall","src":"3669:37:5"},"nodeType":"YulExpressionStatement","src":"3669:37:5"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3647:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3654:3:5","type":""}],"src":"3594:118:5"},{"body":{"nodeType":"YulBlock","src":"3781:52:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3798:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3820:5:5"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"3803:16:5"},"nodeType":"YulFunctionCall","src":"3803:23:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3791:6:5"},"nodeType":"YulFunctionCall","src":"3791:36:5"},"nodeType":"YulExpressionStatement","src":"3791:36:5"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3769:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3776:3:5","type":""}],"src":"3718:115:5"},{"body":{"nodeType":"YulBlock","src":"3902:52:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3919:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3941:5:5"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3924:16:5"},"nodeType":"YulFunctionCall","src":"3924:23:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3912:6:5"},"nodeType":"YulFunctionCall","src":"3912:36:5"},"nodeType":"YulExpressionStatement","src":"3912:36:5"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3890:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3897:3:5","type":""}],"src":"3839:115:5"},{"body":{"nodeType":"YulBlock","src":"4148:191:5","statements":[{"nodeType":"YulAssignment","src":"4159:154:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4309:3:5"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"4166:141:5"},"nodeType":"YulFunctionCall","src":"4166:147:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4159:3:5"}]},{"nodeType":"YulAssignment","src":"4323:10:5","value":{"name":"pos","nodeType":"YulIdentifier","src":"4330:3:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4323:3:5"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4135:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4144:3:5","type":""}],"src":"3960:379:5"},{"body":{"nodeType":"YulBlock","src":"4443:124:5","statements":[{"nodeType":"YulAssignment","src":"4453:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4465:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4476:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4461:3:5"},"nodeType":"YulFunctionCall","src":"4461:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4453:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4533:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4546:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4557:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4542:3:5"},"nodeType":"YulFunctionCall","src":"4542:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4489:43:5"},"nodeType":"YulFunctionCall","src":"4489:71:5"},"nodeType":"YulExpressionStatement","src":"4489:71:5"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4415:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4427:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4438:4:5","type":""}],"src":"4345:222:5"},{"body":{"nodeType":"YulBlock","src":"4699:206:5","statements":[{"nodeType":"YulAssignment","src":"4709:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4721:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4732:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4717:3:5"},"nodeType":"YulFunctionCall","src":"4717:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4709:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4789:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4802:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4813:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4798:3:5"},"nodeType":"YulFunctionCall","src":"4798:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4745:43:5"},"nodeType":"YulFunctionCall","src":"4745:71:5"},"nodeType":"YulExpressionStatement","src":"4745:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4870:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4883:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4894:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4879:3:5"},"nodeType":"YulFunctionCall","src":"4879:18:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4826:43:5"},"nodeType":"YulFunctionCall","src":"4826:72:5"},"nodeType":"YulExpressionStatement","src":"4826:72:5"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4663:9:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4675:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4683:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4694:4:5","type":""}],"src":"4573:332:5"},{"body":{"nodeType":"YulBlock","src":"5113:446:5","statements":[{"nodeType":"YulAssignment","src":"5123:27:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5135:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5146:3:5","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5131:3:5"},"nodeType":"YulFunctionCall","src":"5131:19:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5123:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5204:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5217:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5228:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5213:3:5"},"nodeType":"YulFunctionCall","src":"5213:17:5"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5160:43:5"},"nodeType":"YulFunctionCall","src":"5160:71:5"},"nodeType":"YulExpressionStatement","src":"5160:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5283:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5296:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5307:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5292:3:5"},"nodeType":"YulFunctionCall","src":"5292:18:5"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"5241:41:5"},"nodeType":"YulFunctionCall","src":"5241:70:5"},"nodeType":"YulExpressionStatement","src":"5241:70:5"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5363:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5376:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5387:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5372:3:5"},"nodeType":"YulFunctionCall","src":"5372:18:5"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"5321:41:5"},"nodeType":"YulFunctionCall","src":"5321:70:5"},"nodeType":"YulExpressionStatement","src":"5321:70:5"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5443:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5456:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5467:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5452:3:5"},"nodeType":"YulFunctionCall","src":"5452:18:5"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"5401:41:5"},"nodeType":"YulFunctionCall","src":"5401:70:5"},"nodeType":"YulExpressionStatement","src":"5401:70:5"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"5523:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5536:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5547:3:5","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5532:3:5"},"nodeType":"YulFunctionCall","src":"5532:19:5"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"5481:41:5"},"nodeType":"YulFunctionCall","src":"5481:71:5"},"nodeType":"YulExpressionStatement","src":"5481:71:5"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5053:9:5","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5065:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5073:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5081:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5089:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5097:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5108:4:5","type":""}],"src":"4911:648:5"},{"body":{"nodeType":"YulBlock","src":"5663:124:5","statements":[{"nodeType":"YulAssignment","src":"5673:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5685:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5696:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5681:3:5"},"nodeType":"YulFunctionCall","src":"5681:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5673:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5753:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5766:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5777:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5762:3:5"},"nodeType":"YulFunctionCall","src":"5762:17:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5709:43:5"},"nodeType":"YulFunctionCall","src":"5709:71:5"},"nodeType":"YulExpressionStatement","src":"5709:71:5"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5635:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5647:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5658:4:5","type":""}],"src":"5565:222:5"},{"body":{"nodeType":"YulBlock","src":"5834:88:5","statements":[{"nodeType":"YulAssignment","src":"5844:30:5","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5854:18:5"},"nodeType":"YulFunctionCall","src":"5854:20:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5844:6:5"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5903:6:5"},{"name":"size","nodeType":"YulIdentifier","src":"5911:4:5"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5883:19:5"},"nodeType":"YulFunctionCall","src":"5883:33:5"},"nodeType":"YulExpressionStatement","src":"5883:33:5"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5818:4:5","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5827:6:5","type":""}],"src":"5793:129:5"},{"body":{"nodeType":"YulBlock","src":"5968:35:5","statements":[{"nodeType":"YulAssignment","src":"5978:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5994:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5988:5:5"},"nodeType":"YulFunctionCall","src":"5988:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5978:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5961:6:5","type":""}],"src":"5928:75:5"},{"body":{"nodeType":"YulBlock","src":"6091:229:5","statements":[{"body":{"nodeType":"YulBlock","src":"6196:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6198:16:5"},"nodeType":"YulFunctionCall","src":"6198:18:5"},"nodeType":"YulExpressionStatement","src":"6198:18:5"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6168:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"6176:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6165:2:5"},"nodeType":"YulFunctionCall","src":"6165:30:5"},"nodeType":"YulIf","src":"6162:56:5"},{"nodeType":"YulAssignment","src":"6228:25:5","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6240:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"6248:4:5","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6236:3:5"},"nodeType":"YulFunctionCall","src":"6236:17:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6228:4:5"}]},{"nodeType":"YulAssignment","src":"6290:23:5","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6302:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"6308:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6298:3:5"},"nodeType":"YulFunctionCall","src":"6298:15:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6290:4:5"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6075:6:5","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6086:4:5","type":""}],"src":"6009:311:5"},{"body":{"nodeType":"YulBlock","src":"6439:34:5","statements":[{"nodeType":"YulAssignment","src":"6449:18:5","value":{"name":"pos","nodeType":"YulIdentifier","src":"6464:3:5"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6449:11:5"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6411:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"6416:6:5","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6427:11:5","type":""}],"src":"6326:147:5"},{"body":{"nodeType":"YulBlock","src":"6524:51:5","statements":[{"nodeType":"YulAssignment","src":"6534:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6563:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"6545:17:5"},"nodeType":"YulFunctionCall","src":"6545:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6534:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6506:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6516:7:5","type":""}],"src":"6479:96:5"},{"body":{"nodeType":"YulBlock","src":"6626:32:5","statements":[{"nodeType":"YulAssignment","src":"6636:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"6647:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6636:7:5"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6608:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6618:7:5","type":""}],"src":"6581:77:5"},{"body":{"nodeType":"YulBlock","src":"6708:45:5","statements":[{"nodeType":"YulAssignment","src":"6718:29:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6733:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"6740:6:5","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6729:3:5"},"nodeType":"YulFunctionCall","src":"6729:18:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6718:7:5"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6690:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6700:7:5","type":""}],"src":"6664:89:5"},{"body":{"nodeType":"YulBlock","src":"6804:81:5","statements":[{"nodeType":"YulAssignment","src":"6814:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6829:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"6836:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6825:3:5"},"nodeType":"YulFunctionCall","src":"6825:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6814:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6786:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6796:7:5","type":""}],"src":"6759:126:5"},{"body":{"nodeType":"YulBlock","src":"6936:32:5","statements":[{"nodeType":"YulAssignment","src":"6946:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"6957:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6946:7:5"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6918:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6928:7:5","type":""}],"src":"6891:77:5"},{"body":{"nodeType":"YulBlock","src":"7018:49:5","statements":[{"nodeType":"YulAssignment","src":"7028:33:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7043:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"7050:10:5","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7039:3:5"},"nodeType":"YulFunctionCall","src":"7039:22:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7028:7:5"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7000:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7010:7:5","type":""}],"src":"6974:93:5"},{"body":{"nodeType":"YulBlock","src":"7117:57:5","statements":[{"nodeType":"YulAssignment","src":"7127:41:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7142:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"7149:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7138:3:5"},"nodeType":"YulFunctionCall","src":"7138:30:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7127:7:5"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7099:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7109:7:5","type":""}],"src":"7073:101:5"},{"body":{"nodeType":"YulBlock","src":"7223:238:5","statements":[{"nodeType":"YulVariableDeclaration","src":"7233:58:5","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7255:6:5"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7285:4:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7263:21:5"},"nodeType":"YulFunctionCall","src":"7263:27:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7251:3:5"},"nodeType":"YulFunctionCall","src":"7251:40:5"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7237:10:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"7402:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7404:16:5"},"nodeType":"YulFunctionCall","src":"7404:18:5"},"nodeType":"YulExpressionStatement","src":"7404:18:5"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7345:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"7357:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7342:2:5"},"nodeType":"YulFunctionCall","src":"7342:34:5"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7381:10:5"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7393:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7378:2:5"},"nodeType":"YulFunctionCall","src":"7378:22:5"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7339:2:5"},"nodeType":"YulFunctionCall","src":"7339:62:5"},"nodeType":"YulIf","src":"7336:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7440:2:5","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7444:10:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7433:6:5"},"nodeType":"YulFunctionCall","src":"7433:22:5"},"nodeType":"YulExpressionStatement","src":"7433:22:5"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7209:6:5","type":""},{"name":"size","nodeType":"YulTypedName","src":"7217:4:5","type":""}],"src":"7180:281:5"},{"body":{"nodeType":"YulBlock","src":"7501:142:5","statements":[{"nodeType":"YulAssignment","src":"7511:25:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7534:1:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7516:17:5"},"nodeType":"YulFunctionCall","src":"7516:20:5"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7511:1:5"}]},{"nodeType":"YulAssignment","src":"7545:25:5","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7568:1:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7550:17:5"},"nodeType":"YulFunctionCall","src":"7550:20:5"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7545:1:5"}]},{"body":{"nodeType":"YulBlock","src":"7592:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"7594:16:5"},"nodeType":"YulFunctionCall","src":"7594:18:5"},"nodeType":"YulExpressionStatement","src":"7594:18:5"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7589:1:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7582:6:5"},"nodeType":"YulFunctionCall","src":"7582:9:5"},"nodeType":"YulIf","src":"7579:35:5"},{"nodeType":"YulAssignment","src":"7623:14:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7632:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"7635:1:5"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"7628:3:5"},"nodeType":"YulFunctionCall","src":"7628:9:5"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7623:1:5"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7490:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"7493:1:5","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"7499:1:5","type":""}],"src":"7467:176:5"},{"body":{"nodeType":"YulBlock","src":"7677:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7694:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7697:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7687:6:5"},"nodeType":"YulFunctionCall","src":"7687:88:5"},"nodeType":"YulExpressionStatement","src":"7687:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7791:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7794:4:5","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7784:6:5"},"nodeType":"YulFunctionCall","src":"7784:15:5"},"nodeType":"YulExpressionStatement","src":"7784:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7815:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7818:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7808:6:5"},"nodeType":"YulFunctionCall","src":"7808:15:5"},"nodeType":"YulExpressionStatement","src":"7808:15:5"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"7649:180:5"},{"body":{"nodeType":"YulBlock","src":"7863:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7880:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7883:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7873:6:5"},"nodeType":"YulFunctionCall","src":"7873:88:5"},"nodeType":"YulExpressionStatement","src":"7873:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7977:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7980:4:5","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7970:6:5"},"nodeType":"YulFunctionCall","src":"7970:15:5"},"nodeType":"YulExpressionStatement","src":"7970:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8001:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8004:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7994:6:5"},"nodeType":"YulFunctionCall","src":"7994:15:5"},"nodeType":"YulExpressionStatement","src":"7994:15:5"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"7835:180:5"},{"body":{"nodeType":"YulBlock","src":"8049:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8066:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8069:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8059:6:5"},"nodeType":"YulFunctionCall","src":"8059:88:5"},"nodeType":"YulExpressionStatement","src":"8059:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8163:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8166:4:5","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8156:6:5"},"nodeType":"YulFunctionCall","src":"8156:15:5"},"nodeType":"YulExpressionStatement","src":"8156:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8187:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8190:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8180:6:5"},"nodeType":"YulFunctionCall","src":"8180:15:5"},"nodeType":"YulExpressionStatement","src":"8180:15:5"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8021:180:5"},{"body":{"nodeType":"YulBlock","src":"8235:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8252:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8255:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8245:6:5"},"nodeType":"YulFunctionCall","src":"8245:88:5"},"nodeType":"YulExpressionStatement","src":"8245:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8349:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8352:4:5","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8342:6:5"},"nodeType":"YulFunctionCall","src":"8342:15:5"},"nodeType":"YulExpressionStatement","src":"8342:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8373:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8376:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8366:6:5"},"nodeType":"YulFunctionCall","src":"8366:15:5"},"nodeType":"YulExpressionStatement","src":"8366:15:5"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8207:180:5"},{"body":{"nodeType":"YulBlock","src":"8482:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8499:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8502:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8492:6:5"},"nodeType":"YulFunctionCall","src":"8492:12:5"},"nodeType":"YulExpressionStatement","src":"8492:12:5"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"8393:117:5"},{"body":{"nodeType":"YulBlock","src":"8605:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8622:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8625:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8615:6:5"},"nodeType":"YulFunctionCall","src":"8615:12:5"},"nodeType":"YulExpressionStatement","src":"8615:12:5"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"8516:117:5"},{"body":{"nodeType":"YulBlock","src":"8728:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8745:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8748:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8738:6:5"},"nodeType":"YulFunctionCall","src":"8738:12:5"},"nodeType":"YulExpressionStatement","src":"8738:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"8639:117:5"},{"body":{"nodeType":"YulBlock","src":"8851:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8868:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8871:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8861:6:5"},"nodeType":"YulFunctionCall","src":"8861:12:5"},"nodeType":"YulExpressionStatement","src":"8861:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"8762:117:5"},{"body":{"nodeType":"YulBlock","src":"8933:54:5","statements":[{"nodeType":"YulAssignment","src":"8943:38:5","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8961:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"8968:2:5","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8957:3:5"},"nodeType":"YulFunctionCall","src":"8957:14:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8977:2:5","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8973:3:5"},"nodeType":"YulFunctionCall","src":"8973:7:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8953:3:5"},"nodeType":"YulFunctionCall","src":"8953:28:5"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8943:6:5"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8916:5:5","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"8926:6:5","type":""}],"src":"8885:102:5"},{"body":{"nodeType":"YulBlock","src":"9099:8:5","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9091:6:5","type":""}],"src":"8993:114:5"},{"body":{"nodeType":"YulBlock","src":"9156:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"9213:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9222:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9225:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9215:6:5"},"nodeType":"YulFunctionCall","src":"9215:12:5"},"nodeType":"YulExpressionStatement","src":"9215:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9179:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9204:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9186:17:5"},"nodeType":"YulFunctionCall","src":"9186:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9176:2:5"},"nodeType":"YulFunctionCall","src":"9176:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9169:6:5"},"nodeType":"YulFunctionCall","src":"9169:43:5"},"nodeType":"YulIf","src":"9166:63:5"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9149:5:5","type":""}],"src":"9113:122:5"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"33":[{"length":32,"start":313},{"length":32,"start":397}],"194":[{"length":32,"start":916},{"length":32,"start":1356}],"200":[{"length":32,"start":549}],"202":[{"length":32,"start":609}],"204":[{"length":32,"start":642}],"209":[{"length":32,"start":677}]},"linkReferences":{},"object":"6080604052600436106100555760003560e01c80631fe543e31461005a57806335039208146100835780634fdd3b641461009a578063c1af5785146100c5578063e55ae4e8146100cf578063e586a4f01461010c575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610962565b610137565b005b34801561008f57600080fd5b506100986101f7565b005b3480156100a657600080fd5b506100af61036a565b6040516100bc9190610a50565b60405180910390f35b6100cd610392565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610908565b610501565b6040516101039190610a50565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610ae7565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101e0929190610a6b565b60405180910390fd5b6101f38282610570565b5050565b60018060006101000a81548160ff0219169083600181111561021c5761021b610c67565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016102e6959493929190610a94565b602060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190610935565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156103ec576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610400576103ff610c67565b5b600160009054906101000a900460ff16600181111561042257610421610c67565b5b14610459576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061051657610515610c96565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080805490508260008151811061058b5761058a610c96565b5b602002602001015161059d9190610c07565b905060008082815481106105b4576105b3610c96565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561064757610646610c67565b5b0217905550600067ffffffffffffffff81111561066757610666610cc5565b5b6040519080825280602002602001820160405280156106955781602001602082028036833780820191505090505b50600090805190602001906106ab929190610799565b5060008173ffffffffffffffffffffffffffffffffffffffff16476040516106d290610a3b565b60006040518083038185875af1925050503d806000811461070f576040519150601f19603f3d011682016040523d82523d6000602084013e610714565b606091505b505090508061074f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb112587e57bfa970257f3d54fc52859c6300f6bd7a982462c320fed45c2530ed60405160405180910390a25050505050565b828054828255906000526020600020908101928215610812579160200282015b828111156108115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107b9565b5b50905061081f9190610823565b5090565b5b8082111561083c576000816000905550600101610824565b5090565b600061085361084e84610b27565b610b02565b9050808382526020820190508285602086028201111561087657610875610cf9565b5b60005b858110156108a6578161088c88826108de565b845260208401935060208301925050600181019050610879565b5050509392505050565b600082601f8301126108c5576108c4610cf4565b5b81356108d5848260208601610840565b91505092915050565b6000813590506108ed81610d1c565b92915050565b60008151905061090281610d1c565b92915050565b60006020828403121561091e5761091d610d03565b5b600061092c848285016108de565b91505092915050565b60006020828403121561094b5761094a610d03565b5b6000610959848285016108f3565b91505092915050565b6000806040838503121561097957610978610d03565b5b6000610987858286016108de565b925050602083013567ffffffffffffffff8111156109a8576109a7610cfe565b5b6109b4858286016108b0565b9150509250929050565b6109c781610b5e565b82525050565b6109d681610b70565b82525050565b60006109e9600083610b53565b91506109f482610d19565b600082019050919050565b610a0881610b7a565b82525050565b610a1781610ba8565b82525050565b610a2681610bb2565b82525050565b610a3581610bc2565b82525050565b6000610a46826109dc565b9150819050919050565b6000602082019050610a6560008301846109be565b92915050565b6000604082019050610a8060008301856109be565b610a8d60208301846109be565b9392505050565b600060a082019050610aa960008301886109cd565b610ab66020830187610a2c565b610ac360408301866109ff565b610ad06060830185610a1d565b610add6080830184610a1d565b9695505050505050565b6000602082019050610afc6000830184610a0e565b92915050565b6000610b0c610b1d565b9050610b188282610bd6565b919050565b6000604051905090565b600067ffffffffffffffff821115610b4257610b41610cc5565b5b602082029050602081019050919050565b600081905092915050565b6000610b6982610b88565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b610bdf82610d08565b810181811067ffffffffffffffff82111715610bfe57610bfd610cc5565b5b80604052505050565b6000610c1282610ba8565b9150610c1d83610ba8565b925082610c2d57610c2c610c38565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b610d2581610ba8565b8114610d3057600080fd5b5056fea2646970667358221220b32a7c02b4cc2d7a975c6ec30dac2dcb14dc6a15d72d6a68c0b049992eccf86864736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x35039208 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x4FDD3B64 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xE586A4F0 EQ PUSH2 0x10C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x962 JUMP JUMPDEST PUSH2 0x137 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x98 PUSH2 0x1F7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAF PUSH2 0x36A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBC SWAP2 SWAP1 PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCD PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x501 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x103 SWAP2 SWAP1 PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x548 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0xAE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E9 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E0 SWAP3 SWAP2 SWAP1 PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F3 DUP3 DUP3 PUSH2 0x570 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x21C JUMPI PUSH2 0x21B PUSH2 0xC67 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E6 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x935 JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xEBF56642252004C18A776F30D528E7A0CE8C5DB14B6596FB6550F630C8A24C6C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x3EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x400 JUMPI PUSH2 0x3FF PUSH2 0xC67 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x422 JUMPI PUSH2 0x421 PUSH2 0xC67 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x459 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE76BE6FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D64FB5BA9F2548C5B98468D58F25B87B9E866AFEE0122E92D9FE722BF85076C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x516 JUMPI PUSH2 0x515 PUSH2 0xC96 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x58B JUMPI PUSH2 0x58A PUSH2 0xC96 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x59D SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x5B4 JUMPI PUSH2 0x5B3 PUSH2 0xC96 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x647 JUMPI PUSH2 0x646 PUSH2 0xC67 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x667 JUMPI PUSH2 0x666 PUSH2 0xCC5 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x695 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x6AB SWAP3 SWAP2 SWAP1 PUSH2 0x799 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x6D2 SWAP1 PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x714 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x74F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB112587E57BFA970257F3D54FC52859C6300F6BD7A982462C320FED45C2530ED PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x812 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x811 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x7B9 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x81F SWAP2 SWAP1 PUSH2 0x823 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x83C JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x824 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x853 PUSH2 0x84E DUP5 PUSH2 0xB27 JUMP JUMPDEST PUSH2 0xB02 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x876 JUMPI PUSH2 0x875 PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8A6 JUMPI DUP2 PUSH2 0x88C DUP9 DUP3 PUSH2 0x8DE JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x879 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8C5 JUMPI PUSH2 0x8C4 PUSH2 0xCF4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8D5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x840 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8ED DUP2 PUSH2 0xD1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x902 DUP2 PUSH2 0xD1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91E JUMPI PUSH2 0x91D PUSH2 0xD03 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x92C DUP5 DUP3 DUP6 ADD PUSH2 0x8DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x94B JUMPI PUSH2 0x94A PUSH2 0xD03 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x959 DUP5 DUP3 DUP6 ADD PUSH2 0x8F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x979 JUMPI PUSH2 0x978 PUSH2 0xD03 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x987 DUP6 DUP3 DUP7 ADD PUSH2 0x8DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9A8 JUMPI PUSH2 0x9A7 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x9B4 DUP6 DUP3 DUP7 ADD PUSH2 0x8B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C7 DUP2 PUSH2 0xB5E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x9D6 DUP2 PUSH2 0xB70 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E9 PUSH1 0x0 DUP4 PUSH2 0xB53 JUMP JUMPDEST SWAP2 POP PUSH2 0x9F4 DUP3 PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA08 DUP2 PUSH2 0xB7A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA17 DUP2 PUSH2 0xBA8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA26 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA35 DUP2 PUSH2 0xBC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA46 DUP3 PUSH2 0x9DC JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x9BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xA80 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x9BE JUMP JUMPDEST PUSH2 0xA8D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xAA9 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x9CD JUMP JUMPDEST PUSH2 0xAB6 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xA2C JUMP JUMPDEST PUSH2 0xAC3 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x9FF JUMP JUMPDEST PUSH2 0xAD0 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xA1D JUMP JUMPDEST PUSH2 0xADD PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xA1D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xAFC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA0E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0C PUSH2 0xB1D JUMP JUMPDEST SWAP1 POP PUSH2 0xB18 DUP3 DUP3 PUSH2 0xBD6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xB42 JUMPI PUSH2 0xB41 PUSH2 0xCC5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB69 DUP3 PUSH2 0xB88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBDF DUP3 PUSH2 0xD08 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xBFE JUMPI PUSH2 0xBFD PUSH2 0xCC5 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC12 DUP3 PUSH2 0xBA8 JUMP JUMPDEST SWAP2 POP PUSH2 0xC1D DUP4 PUSH2 0xBA8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xC2D JUMPI PUSH2 0xC2C PUSH2 0xC38 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD25 DUP2 PUSH2 0xBA8 JUMP JUMPDEST DUP2 EQ PUSH2 0xD30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0x2A PUSH29 0x2B4CC2D7A975C6EC30DAC2DCB14DC6A15D72D6A68C0B049992ECCF868 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"398:2955:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6794:256:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2111:371:4;;;;;;;;;;;;;:::i;:::-;;3256:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1656:374;;;:::i;:::-;;3146:104;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3053:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6794:256:2;6907:14;6893:28;;:10;:28;;;6889:109;;6964:10;6976:14;6938:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6889:109;7003:42;7022:9;7033:11;7003:18;:42::i;:::-;6794:256;;:::o;2111:371:4:-;2181:24;2164:14;;:41;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;2215:17;2235:16;:35;;;2284:9;2307:16;818:1;2376:18;910:1;2235:192;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2215:212;;2465:9;2442:33;;;;;;;;;;2154:328;2111:371::o;3256:95::-;3304:7;3330:14;;;;;;;;;;3323:21;;3256:95;:::o;1656:374::-;1721:10;1709:9;:22;1705:89;;;1754:29;;;;;;;;;;;;;;1705:89;1825:17;1807:35;;;;;;;;:::i;:::-;;:14;;;;;;;;;;;:35;;;;;;;;:::i;:::-;;;1803:91;;1865:18;;;;;;;;;;;;;;1803:91;1903:9;1926:10;1903:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1966:10;1953:24;;;;;;;;;;;;1656:374::o;3146:104::-;3201:7;3227:9;3237:5;3227:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3220:23;;3146:104;;;:::o;3053:87::-;3097:7;3123:10;3116:17;;3053:87;:::o;2488:559::-;2593:19;2632:9;:16;;;;2615:11;2627:1;2615:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;2593:55;;2658:28;2689:9;2699:11;2689:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2658:53;;2738:12;2721:14;;:29;;;;;;;;;;;;;;;;;;2777:17;2760:14;;:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;2838:1;2816:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2804:9;:36;;;;;;;;;;;;:::i;:::-;;2851:12;2869;:17;;2894:21;2869:51;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2850:70;;;2935:7;2930:70;;2965:24;;;;;;;;;;;;;;2930:70;3027:12;3014:26;;;;;;;;;;;;2583:464;;;2488:559;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:722:5:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;769:370::-;840:5;889:3;882:4;874:6;870:17;866:27;856:122;;897:79;;:::i;:::-;856:122;1014:6;1001:20;1039:94;1129:3;1121:6;1114:4;1106:6;1102:17;1039:94;:::i;:::-;1030:103;;846:293;769:370;;;;:::o;1145:139::-;1191:5;1229:6;1216:20;1207:29;;1245:33;1272:5;1245:33;:::i;:::-;1145:139;;;;:::o;1290:143::-;1347:5;1378:6;1372:13;1363:22;;1394:33;1421:5;1394:33;:::i;:::-;1290:143;;;;:::o;1439:329::-;1498:6;1547:2;1535:9;1526:7;1522:23;1518:32;1515:119;;;1553:79;;:::i;:::-;1515:119;1673:1;1698:53;1743:7;1734:6;1723:9;1719:22;1698:53;:::i;:::-;1688:63;;1644:117;1439:329;;;;:::o;1774:351::-;1844:6;1893:2;1881:9;1872:7;1868:23;1864:32;1861:119;;;1899:79;;:::i;:::-;1861:119;2019:1;2044:64;2100:7;2091:6;2080:9;2076:22;2044:64;:::i;:::-;2034:74;;1990:128;1774:351;;;;:::o;2131:684::-;2224:6;2232;2281:2;2269:9;2260:7;2256:23;2252:32;2249:119;;;2287:79;;:::i;:::-;2249:119;2407:1;2432:53;2477:7;2468:6;2457:9;2453:22;2432:53;:::i;:::-;2422:63;;2378:117;2562:2;2551:9;2547:18;2534:32;2593:18;2585:6;2582:30;2579:117;;;2615:79;;:::i;:::-;2579:117;2720:78;2790:7;2781:6;2770:9;2766:22;2720:78;:::i;:::-;2710:88;;2505:303;2131:684;;;;;:::o;2821:118::-;2908:24;2926:5;2908:24;:::i;:::-;2903:3;2896:37;2821:118;;:::o;2945:::-;3032:24;3050:5;3032:24;:::i;:::-;3027:3;3020:37;2945:118;;:::o;3069:398::-;3228:3;3249:83;3330:1;3325:3;3249:83;:::i;:::-;3242:90;;3341:93;3430:3;3341:93;:::i;:::-;3459:1;3454:3;3450:11;3443:18;;3069:398;;;:::o;3473:115::-;3558:23;3575:5;3558:23;:::i;:::-;3553:3;3546:36;3473:115;;:::o;3594:118::-;3681:24;3699:5;3681:24;:::i;:::-;3676:3;3669:37;3594:118;;:::o;3718:115::-;3803:23;3820:5;3803:23;:::i;:::-;3798:3;3791:36;3718:115;;:::o;3839:::-;3924:23;3941:5;3924:23;:::i;:::-;3919:3;3912:36;3839:115;;:::o;3960:379::-;4144:3;4166:147;4309:3;4166:147;:::i;:::-;4159:154;;4330:3;4323:10;;3960:379;;;:::o;4345:222::-;4438:4;4476:2;4465:9;4461:18;4453:26;;4489:71;4557:1;4546:9;4542:17;4533:6;4489:71;:::i;:::-;4345:222;;;;:::o;4573:332::-;4694:4;4732:2;4721:9;4717:18;4709:26;;4745:71;4813:1;4802:9;4798:17;4789:6;4745:71;:::i;:::-;4826:72;4894:2;4883:9;4879:18;4870:6;4826:72;:::i;:::-;4573:332;;;;;:::o;4911:648::-;5108:4;5146:3;5135:9;5131:19;5123:27;;5160:71;5228:1;5217:9;5213:17;5204:6;5160:71;:::i;:::-;5241:70;5307:2;5296:9;5292:18;5283:6;5241:70;:::i;:::-;5321;5387:2;5376:9;5372:18;5363:6;5321:70;:::i;:::-;5401;5467:2;5456:9;5452:18;5443:6;5401:70;:::i;:::-;5481:71;5547:3;5536:9;5532:19;5523:6;5481:71;:::i;:::-;4911:648;;;;;;;;:::o;5565:222::-;5658:4;5696:2;5685:9;5681:18;5673:26;;5709:71;5777:1;5766:9;5762:17;5753:6;5709:71;:::i;:::-;5565:222;;;;:::o;5793:129::-;5827:6;5854:20;;:::i;:::-;5844:30;;5883:33;5911:4;5903:6;5883:33;:::i;:::-;5793:129;;;:::o;5928:75::-;5961:6;5994:2;5988:9;5978:19;;5928:75;:::o;6009:311::-;6086:4;6176:18;6168:6;6165:30;6162:56;;;6198:18;;:::i;:::-;6162:56;6248:4;6240:6;6236:17;6228:25;;6308:4;6302;6298:15;6290:23;;6009:311;;;:::o;6326:147::-;6427:11;6464:3;6449:18;;6326:147;;;;:::o;6479:96::-;6516:7;6545:24;6563:5;6545:24;:::i;:::-;6534:35;;6479:96;;;:::o;6581:77::-;6618:7;6647:5;6636:16;;6581:77;;;:::o;6664:89::-;6700:7;6740:6;6733:5;6729:18;6718:29;;6664:89;;;:::o;6759:126::-;6796:7;6836:42;6829:5;6825:54;6814:65;;6759:126;;;:::o;6891:77::-;6928:7;6957:5;6946:16;;6891:77;;;:::o;6974:93::-;7010:7;7050:10;7043:5;7039:22;7028:33;;6974:93;;;:::o;7073:101::-;7109:7;7149:18;7142:5;7138:30;7127:41;;7073:101;;;:::o;7180:281::-;7263:27;7285:4;7263:27;:::i;:::-;7255:6;7251:40;7393:6;7381:10;7378:22;7357:18;7345:10;7342:34;7339:62;7336:88;;;7404:18;;:::i;:::-;7336:88;7444:10;7440:2;7433:22;7223:238;7180:281;;:::o;7467:176::-;7499:1;7516:20;7534:1;7516:20;:::i;:::-;7511:25;;7550:20;7568:1;7550:20;:::i;:::-;7545:25;;7589:1;7579:35;;7594:18;;:::i;:::-;7579:35;7635:1;7632;7628:9;7623:14;;7467:176;;;;:::o;7649:180::-;7697:77;7694:1;7687:88;7794:4;7791:1;7784:15;7818:4;7815:1;7808:15;7835:180;7883:77;7880:1;7873:88;7980:4;7977:1;7970:15;8004:4;8001:1;7994:15;8021:180;8069:77;8066:1;8059:88;8166:4;8163:1;8156:15;8190:4;8187:1;8180:15;8207:180;8255:77;8252:1;8245:88;8352:4;8349:1;8342:15;8376:4;8373:1;8366:15;8393:117;8502:1;8499;8492:12;8516:117;8625:1;8622;8615:12;8639:117;8748:1;8745;8738:12;8762:117;8871:1;8868;8861:12;8885:102;8926:6;8977:2;8973:7;8968:2;8961:5;8957:14;8953:28;8943:38;;8885:102;;;:::o;8993:114::-;;:::o;9113:122::-;9186:24;9204:5;9186:24;:::i;:::-;9179:5;9176:35;9166:63;;9225:1;9222;9215:12;9166:63;9113:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"686600","executionCost":"infinite","totalCost":"infinite"},"external":{"enterLottery()":"infinite","getEntryFee()":"infinite","getLatestWinner()":"2591","getPlayer(uint256)":"5033","rawFulfillRandomWords(uint256,uint256[])":"infinite","requestForRandomWinner()":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"enterLottery()":"c1af5785","getEntryFee()":"e586a4f0","getLatestWinner()":"4fdd3b64","getPlayer(uint256)":"e55ae4e8","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","requestForRandomWinner()":"35039208"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"PickedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestForRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\n// solhint-disable-next-line no-unused-import\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xa2d344ace99e920239fd1388129a3c9bc8512e1ad9abe4d869c39fa8394fb546\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Lottery__NotOpen();\\n\\ncontract Raffle is VRFConsumerBaseV2 {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    // State variables\\n    uint256 private immutable i_entryFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant NUM_REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callBackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    LotteryState private s_lotteryState;\\n\\n    address private s_latestWinner;\\n\\n    // Events\\n    event LotteryEnter(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestID);\\n    event PickedWinner(address indexed winner);\\n\\n    constructor(\\n        uint256 entranceFee,\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callBackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entryFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gaslane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callBackGasLimit = callBackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entryFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender); // Emitting an event when we update s_players\\n    }\\n\\n    //function checkUpKeep(bytes calldata checkdata) external override {}\\n\\n    function requestForRandomWinner() external {\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestID = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            NUM_REQUEST_CONFIRMATIONS,\\n            i_callBackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(requestID);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestID, uint256[] memory randomWords) internal override {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        address payable latestWinner = s_players[winnerIndex];\\n        s_latestWinner = latestWinner;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_players = new address payable[](0);\\n        (bool success, ) = latestWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit PickedWinner(latestWinner);\\n    }\\n\\n    function getEntryFee() public view returns (uint256) {\\n        return i_entryFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLatestWinner() public view returns (address) {\\n        return s_latestWinner;\\n    }\\n}\\n\",\"keccak256\":\"0xcb5e87d4f73b5bd6c713c8d0436d573f351aee4b22e32c8602e1701910821a24\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":197,"contract":"contracts/raffle.sol:Raffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":215,"contract":"contracts/raffle.sol:Raffle","label":"s_lotteryState","offset":0,"slot":"1","type":"t_enum(LotteryState)192"},{"astId":217,"contract":"contracts/raffle.sol:Raffle","label":"s_latestWinner","offset":1,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(LotteryState)192":{"encoding":"inplace","label":"enum Raffle.LotteryState","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}